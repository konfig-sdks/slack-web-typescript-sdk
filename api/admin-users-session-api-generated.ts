/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminuserssessionInvalidateSessionRequest } from '../models';
// @ts-ignore
import { AdminuserssessionInvalidateSessionResponse } from '../models';
// @ts-ignore
import { AdminuserssessionInvalidateSessiondefaultResponse } from '../models';
// @ts-ignore
import { AdminuserssessionResetSessionsRequest } from '../models';
// @ts-ignore
import { AdminuserssessionResetSessionsResponse } from '../models';
// @ts-ignore
import { AdminuserssessionResetSessionsdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminUsersSessionApi - axios parameter creator
 * @export
 */
export const AdminUsersSessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalidate a single session for a user by session_id
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {number} sessionId 
         * @param {string} teamId ID of the team that the session belongs to
         * @param {AdminuserssessionInvalidateSessionRequest} adminuserssessionInvalidateSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateSession: async (token: string, sessionId: number, teamId: string, adminuserssessionInvalidateSessionRequest: AdminuserssessionInvalidateSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('invalidateSession', 'token', token)
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('invalidateSession', 'sessionId', sessionId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('invalidateSession', 'teamId', teamId)
            // verify required parameter 'adminuserssessionInvalidateSessionRequest' is not null or undefined
            assertParamExists('invalidateSession', 'adminuserssessionInvalidateSessionRequest', adminuserssessionInvalidateSessionRequest)
            const localVarPath = `/admin.users.session.invalidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (sessionId !== undefined) {
                await addFormParam('session_id', sessionId, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminuserssessionInvalidateSessionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.session.invalidate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminuserssessionInvalidateSessionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Wipes all valid sessions on all devices for a given user
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} userId The ID of the user to wipe sessions for
         * @param {AdminuserssessionResetSessionsRequest} adminuserssessionResetSessionsRequest 
         * @param {boolean} [mobileOnly] Only expire mobile sessions (default: false)
         * @param {boolean} [webOnly] Only expire web sessions (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSessions: async (token: string, userId: string, adminuserssessionResetSessionsRequest: AdminuserssessionResetSessionsRequest, mobileOnly?: boolean, webOnly?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('resetSessions', 'token', token)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('resetSessions', 'userId', userId)
            // verify required parameter 'adminuserssessionResetSessionsRequest' is not null or undefined
            assertParamExists('resetSessions', 'adminuserssessionResetSessionsRequest', adminuserssessionResetSessionsRequest)
            const localVarPath = `/admin.users.session.reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (mobileOnly !== undefined) {
                await addFormParam('mobile_only', mobileOnly, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
            if (webOnly !== undefined) {
                await addFormParam('web_only', webOnly, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminuserssessionResetSessionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.session.reset',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminuserssessionResetSessionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUsersSessionApi - functional programming interface
 * @export
 */
export const AdminUsersSessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUsersSessionApiAxiosParamCreator(configuration)
    return {
        /**
         * Invalidate a single session for a user by session_id
         * @param {AdminUsersSessionApiInvalidateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidateSession(requestParameters: AdminUsersSessionApiInvalidateSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserssessionInvalidateSessionResponse>> {
            const adminuserssessionInvalidateSessionRequest: AdminuserssessionInvalidateSessionRequest = {
                session_id: requestParameters.session_id,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidateSession(requestParameters.token, requestParameters.sessionId, requestParameters.teamId, adminuserssessionInvalidateSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Wipes all valid sessions on all devices for a given user
         * @param {AdminUsersSessionApiResetSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetSessions(requestParameters: AdminUsersSessionApiResetSessionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserssessionResetSessionsResponse>> {
            const adminuserssessionResetSessionsRequest: AdminuserssessionResetSessionsRequest = {
                mobile_only: requestParameters.mobile_only,
                user_id: requestParameters.user_id,
                web_only: requestParameters.web_only
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetSessions(requestParameters.token, requestParameters.userId, adminuserssessionResetSessionsRequest, requestParameters.mobileOnly, requestParameters.webOnly, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUsersSessionApi - factory interface
 * @export
 */
export const AdminUsersSessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUsersSessionApiFp(configuration)
    return {
        /**
         * Invalidate a single session for a user by session_id
         * @param {AdminUsersSessionApiInvalidateSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateSession(requestParameters: AdminUsersSessionApiInvalidateSessionRequest, options?: AxiosRequestConfig): AxiosPromise<AdminuserssessionInvalidateSessionResponse> {
            return localVarFp.invalidateSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Wipes all valid sessions on all devices for a given user
         * @param {AdminUsersSessionApiResetSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSessions(requestParameters: AdminUsersSessionApiResetSessionsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminuserssessionResetSessionsResponse> {
            return localVarFp.resetSessions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for invalidateSession operation in AdminUsersSessionApi.
 * @export
 * @interface AdminUsersSessionApiInvalidateSessionRequest
 */
export type AdminUsersSessionApiInvalidateSessionRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersSessionApiInvalidateSession
    */
    readonly token: string
    
    /**
    * 
    * @type {number}
    * @memberof AdminUsersSessionApiInvalidateSession
    */
    readonly sessionId: number
    
    /**
    * ID of the team that the session belongs to
    * @type {string}
    * @memberof AdminUsersSessionApiInvalidateSession
    */
    readonly teamId: string
    
} & AdminuserssessionInvalidateSessionRequest

/**
 * Request parameters for resetSessions operation in AdminUsersSessionApi.
 * @export
 * @interface AdminUsersSessionApiResetSessionsRequest
 */
export type AdminUsersSessionApiResetSessionsRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersSessionApiResetSessions
    */
    readonly token: string
    
    /**
    * The ID of the user to wipe sessions for
    * @type {string}
    * @memberof AdminUsersSessionApiResetSessions
    */
    readonly userId: string
    
    /**
    * Only expire mobile sessions (default: false)
    * @type {boolean}
    * @memberof AdminUsersSessionApiResetSessions
    */
    readonly mobileOnly?: boolean
    
    /**
    * Only expire web sessions (default: false)
    * @type {boolean}
    * @memberof AdminUsersSessionApiResetSessions
    */
    readonly webOnly?: boolean
    
} & AdminuserssessionResetSessionsRequest

/**
 * AdminUsersSessionApiGenerated - object-oriented interface
 * @export
 * @class AdminUsersSessionApiGenerated
 * @extends {BaseAPI}
 */
export class AdminUsersSessionApiGenerated extends BaseAPI {
    /**
     * Invalidate a single session for a user by session_id
     * @param {AdminUsersSessionApiInvalidateSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersSessionApiGenerated
     */
    public invalidateSession(requestParameters: AdminUsersSessionApiInvalidateSessionRequest, options?: AxiosRequestConfig) {
        return AdminUsersSessionApiFp(this.configuration).invalidateSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Wipes all valid sessions on all devices for a given user
     * @param {AdminUsersSessionApiResetSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersSessionApiGenerated
     */
    public resetSessions(requestParameters: AdminUsersSessionApiResetSessionsRequest, options?: AxiosRequestConfig) {
        return AdminUsersSessionApiFp(this.configuration).resetSessions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
