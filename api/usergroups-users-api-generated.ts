/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UsergroupsusersListAllUsersResponse } from '../models';
// @ts-ignore
import { UsergroupsusersListAllUsersdefaultResponse } from '../models';
// @ts-ignore
import { UsergroupsusersUpdateListRequest } from '../models';
// @ts-ignore
import { UsergroupsusersUpdateListResponse } from '../models';
// @ts-ignore
import { UsergroupsusersUpdateListdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsergroupsUsersApi - axios parameter creator
 * @export
 */
export const UsergroupsUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all users in a User Group
         * @param {string} token Authentication token. Requires scope: &#x60;usergroups:read&#x60;
         * @param {string} usergroup The encoded ID of the User Group to update.
         * @param {boolean} [includeDisabled] Allow results that involve disabled User Groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers: async (token: string, usergroup: string, includeDisabled?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listAllUsers', 'token', token)
            // verify required parameter 'usergroup' is not null or undefined
            assertParamExists('listAllUsers', 'usergroup', usergroup)
            const localVarPath = `/usergroups.users.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["usergroups:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (includeDisabled !== undefined) {
                localVarQueryParameter['include_disabled'] = includeDisabled;
            }

            if (usergroup !== undefined) {
                localVarQueryParameter['usergroup'] = usergroup;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/usergroups.users.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the list of users for a User Group
         * @param {string} token Authentication token. Requires scope: &#x60;usergroups:write&#x60;
         * @param {string} usergroup The encoded ID of the User Group to update.
         * @param {string} users A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
         * @param {boolean} [includeCount] Include the number of users in the User Group.
         * @param {UsergroupsusersUpdateListRequest} [usergroupsusersUpdateListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList: async (token: string, usergroup: string, users: string, includeCount?: boolean, usergroupsusersUpdateListRequest?: UsergroupsusersUpdateListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('updateList', 'token', token)
            // verify required parameter 'usergroup' is not null or undefined
            assertParamExists('updateList', 'usergroup', usergroup)
            // verify required parameter 'users' is not null or undefined
            assertParamExists('updateList', 'users', users)
            const localVarPath = `/usergroups.users.update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["usergroups:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (includeCount !== undefined) {
                await addFormParam('include_count', includeCount, false, true)
            }
    
            if (usergroup !== undefined) {
                await addFormParam('usergroup', usergroup, false, true)
            }
    
            if (users !== undefined) {
                await addFormParam('users', users, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usergroupsusersUpdateListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/usergroups.users.update',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usergroupsusersUpdateListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsergroupsUsersApi - functional programming interface
 * @export
 */
export const UsergroupsUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsergroupsUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * List all users in a User Group
         * @param {UsergroupsUsersApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllUsers(requestParameters: UsergroupsUsersApiListAllUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupsusersListAllUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllUsers(requestParameters.token, requestParameters.usergroup, requestParameters.includeDisabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the list of users for a User Group
         * @param {UsergroupsUsersApiUpdateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateList(requestParameters: UsergroupsUsersApiUpdateListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsergroupsusersUpdateListResponse>> {
            const usergroupsusersUpdateListRequest: UsergroupsusersUpdateListRequest = {
                include_count: requestParameters.include_count,
                usergroup: requestParameters.usergroup,
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateList(requestParameters.token, requestParameters.usergroup, requestParameters.users, requestParameters.includeCount, usergroupsusersUpdateListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsergroupsUsersApi - factory interface
 * @export
 */
export const UsergroupsUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsergroupsUsersApiFp(configuration)
    return {
        /**
         * List all users in a User Group
         * @param {UsergroupsUsersApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(requestParameters: UsergroupsUsersApiListAllUsersRequest, options?: AxiosRequestConfig): AxiosPromise<UsergroupsusersListAllUsersResponse> {
            return localVarFp.listAllUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the list of users for a User Group
         * @param {UsergroupsUsersApiUpdateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateList(requestParameters: UsergroupsUsersApiUpdateListRequest, options?: AxiosRequestConfig): AxiosPromise<UsergroupsusersUpdateListResponse> {
            return localVarFp.updateList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listAllUsers operation in UsergroupsUsersApi.
 * @export
 * @interface UsergroupsUsersApiListAllUsersRequest
 */
export type UsergroupsUsersApiListAllUsersRequest = {
    
    /**
    * Authentication token. Requires scope: `usergroups:read`
    * @type {string}
    * @memberof UsergroupsUsersApiListAllUsers
    */
    readonly token: string
    
    /**
    * The encoded ID of the User Group to update.
    * @type {string}
    * @memberof UsergroupsUsersApiListAllUsers
    */
    readonly usergroup: string
    
    /**
    * Allow results that involve disabled User Groups.
    * @type {boolean}
    * @memberof UsergroupsUsersApiListAllUsers
    */
    readonly includeDisabled?: boolean
    
}

/**
 * Request parameters for updateList operation in UsergroupsUsersApi.
 * @export
 * @interface UsergroupsUsersApiUpdateListRequest
 */
export type UsergroupsUsersApiUpdateListRequest = {
    
    /**
    * Authentication token. Requires scope: `usergroups:write`
    * @type {string}
    * @memberof UsergroupsUsersApiUpdateList
    */
    readonly token: string
    
    /**
    * The encoded ID of the User Group to update.
    * @type {string}
    * @memberof UsergroupsUsersApiUpdateList
    */
    readonly usergroup: string
    
    /**
    * A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
    * @type {string}
    * @memberof UsergroupsUsersApiUpdateList
    */
    readonly users: string
    
    /**
    * Include the number of users in the User Group.
    * @type {boolean}
    * @memberof UsergroupsUsersApiUpdateList
    */
    readonly includeCount?: boolean
    
} & UsergroupsusersUpdateListRequest

/**
 * UsergroupsUsersApiGenerated - object-oriented interface
 * @export
 * @class UsergroupsUsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsergroupsUsersApiGenerated extends BaseAPI {
    /**
     * List all users in a User Group
     * @param {UsergroupsUsersApiListAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsergroupsUsersApiGenerated
     */
    public listAllUsers(requestParameters: UsergroupsUsersApiListAllUsersRequest, options?: AxiosRequestConfig) {
        return UsergroupsUsersApiFp(this.configuration).listAllUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the list of users for a User Group
     * @param {UsergroupsUsersApiUpdateListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsergroupsUsersApiGenerated
     */
    public updateList(requestParameters: UsergroupsUsersApiUpdateListRequest, options?: AxiosRequestConfig) {
        return UsergroupsUsersApiFp(this.configuration).updateList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
