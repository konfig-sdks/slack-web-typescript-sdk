/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FilescommentsDeleteCommentRequest } from '../models';
// @ts-ignore
import { FilescommentsDeleteCommentResponse } from '../models';
// @ts-ignore
import { FilescommentsDeleteCommentdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FilesCommentsApi - axios parameter creator
 * @export
 */
export const FilesCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an existing comment on a file.
         * @param {string} [token] Authentication token. Requires scope: &#x60;files:write:user&#x60;
         * @param {string} [file] File to delete a comment from.
         * @param {string} [id] The comment to delete.
         * @param {FilescommentsDeleteCommentRequest} [filescommentsDeleteCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment: async (token?: string, file?: string, id?: string, filescommentsDeleteCommentRequest?: FilescommentsDeleteCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files.comments.delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["files:write:user"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (file !== undefined) {
                await addFormParam('file', file, false, true)
            }
    
            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: filescommentsDeleteCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/files.comments.delete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(filescommentsDeleteCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesCommentsApi - functional programming interface
 * @export
 */
export const FilesCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes an existing comment on a file.
         * @param {FilesCommentsApiDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComment(requestParameters: FilesCommentsApiDeleteCommentRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilescommentsDeleteCommentResponse>> {
            const filescommentsDeleteCommentRequest: FilescommentsDeleteCommentRequest = {
                file: requestParameters.file,
                id: requestParameters.id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComment(requestParameters.token, requestParameters.file, requestParameters.id, filescommentsDeleteCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesCommentsApi - factory interface
 * @export
 */
export const FilesCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesCommentsApiFp(configuration)
    return {
        /**
         * Deletes an existing comment on a file.
         * @param {FilesCommentsApiDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(requestParameters: FilesCommentsApiDeleteCommentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FilescommentsDeleteCommentResponse> {
            return localVarFp.deleteComment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteComment operation in FilesCommentsApi.
 * @export
 * @interface FilesCommentsApiDeleteCommentRequest
 */
export type FilesCommentsApiDeleteCommentRequest = {
    
    /**
    * Authentication token. Requires scope: `files:write:user`
    * @type {string}
    * @memberof FilesCommentsApiDeleteComment
    */
    readonly token?: string
    
    /**
    * File to delete a comment from.
    * @type {string}
    * @memberof FilesCommentsApiDeleteComment
    */
    readonly file?: string
    
    /**
    * The comment to delete.
    * @type {string}
    * @memberof FilesCommentsApiDeleteComment
    */
    readonly id?: string
    
} & FilescommentsDeleteCommentRequest

/**
 * FilesCommentsApiGenerated - object-oriented interface
 * @export
 * @class FilesCommentsApiGenerated
 * @extends {BaseAPI}
 */
export class FilesCommentsApiGenerated extends BaseAPI {
    /**
     * Deletes an existing comment on a file.
     * @param {FilesCommentsApiDeleteCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesCommentsApiGenerated
     */
    public deleteComment(requestParameters: FilesCommentsApiDeleteCommentRequest = {}, options?: AxiosRequestConfig) {
        return FilesCommentsApiFp(this.configuration).deleteComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
