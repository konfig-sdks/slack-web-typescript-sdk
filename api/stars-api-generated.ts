/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { StarsAddRequest } from '../models';
// @ts-ignore
import { StarsAddResponse } from '../models';
// @ts-ignore
import { StarsAdddefaultResponse } from '../models';
// @ts-ignore
import { StarsListResponse } from '../models';
// @ts-ignore
import { StarsListdefaultResponse } from '../models';
// @ts-ignore
import { StarsRemoveRequest } from '../models';
// @ts-ignore
import { StarsRemoveResponse } from '../models';
// @ts-ignore
import { StarsRemovedefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StarsApi - axios parameter creator
 * @export
 */
export const StarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a star to an item.
         * @param {string} token Authentication token. Requires scope: &#x60;stars:write&#x60;
         * @param {string} [channel] Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;).
         * @param {string} [file] File to add star to.
         * @param {string} [fileComment] File comment to add star to.
         * @param {string} [timestamp] Timestamp of the message to add star to.
         * @param {StarsAddRequest} [starsAddRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (token: string, channel?: string, file?: string, fileComment?: string, timestamp?: string, starsAddRequest?: StarsAddRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('add', 'token', token)
            const localVarPath = `/stars.add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["stars:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channel !== undefined) {
                await addFormParam('channel', channel, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, false, true)
            }
    
            if (fileComment !== undefined) {
                await addFormParam('file_comment', fileComment, false, true)
            }
    
            if (timestamp !== undefined) {
                await addFormParam('timestamp', timestamp, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: starsAddRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stars.add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(starsAddRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists stars for a user.
         * @param {string} [token] Authentication token. Requires scope: &#x60;stars:read&#x60;
         * @param {string} [count] 
         * @param {string} [page] 
         * @param {string} [cursor] Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request\&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more details.
         * @param {number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\&#39;t been reached.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (token?: string, count?: string, page?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stars.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["stars:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stars.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a star from an item.
         * @param {string} token Authentication token. Requires scope: &#x60;stars:write&#x60;
         * @param {string} [channel] Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;).
         * @param {string} [file] File to remove star from.
         * @param {string} [fileComment] File comment to remove star from.
         * @param {string} [timestamp] Timestamp of the message to remove star from.
         * @param {StarsRemoveRequest} [starsRemoveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (token: string, channel?: string, file?: string, fileComment?: string, timestamp?: string, starsRemoveRequest?: StarsRemoveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('remove', 'token', token)
            const localVarPath = `/stars.remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["stars:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channel !== undefined) {
                await addFormParam('channel', channel, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, false, true)
            }
    
            if (fileComment !== undefined) {
                await addFormParam('file_comment', fileComment, false, true)
            }
    
            if (timestamp !== undefined) {
                await addFormParam('timestamp', timestamp, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: starsRemoveRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stars.remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(starsRemoveRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StarsApi - functional programming interface
 * @export
 */
export const StarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a star to an item.
         * @param {StarsApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(requestParameters: StarsApiAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarsAddResponse>> {
            const starsAddRequest: StarsAddRequest = {
                channel: requestParameters.channel,
                file: requestParameters.file,
                file_comment: requestParameters.file_comment,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(requestParameters.token, requestParameters.channel, requestParameters.file, requestParameters.fileComment, requestParameters.timestamp, starsAddRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists stars for a user.
         * @param {StarsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: StarsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.token, requestParameters.count, requestParameters.page, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a star from an item.
         * @param {StarsApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: StarsApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StarsRemoveResponse>> {
            const starsRemoveRequest: StarsRemoveRequest = {
                channel: requestParameters.channel,
                file: requestParameters.file,
                file_comment: requestParameters.file_comment,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.token, requestParameters.channel, requestParameters.file, requestParameters.fileComment, requestParameters.timestamp, starsRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StarsApi - factory interface
 * @export
 */
export const StarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StarsApiFp(configuration)
    return {
        /**
         * Adds a star to an item.
         * @param {StarsApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(requestParameters: StarsApiAddRequest, options?: AxiosRequestConfig): AxiosPromise<StarsAddResponse> {
            return localVarFp.add(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists stars for a user.
         * @param {StarsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: StarsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<StarsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a star from an item.
         * @param {StarsApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: StarsApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<StarsRemoveResponse> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for add operation in StarsApi.
 * @export
 * @interface StarsApiAddRequest
 */
export type StarsApiAddRequest = {
    
    /**
    * Authentication token. Requires scope: `stars:write`
    * @type {string}
    * @memberof StarsApiAdd
    */
    readonly token: string
    
    /**
    * Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).
    * @type {string}
    * @memberof StarsApiAdd
    */
    readonly channel?: string
    
    /**
    * File to add star to.
    * @type {string}
    * @memberof StarsApiAdd
    */
    readonly file?: string
    
    /**
    * File comment to add star to.
    * @type {string}
    * @memberof StarsApiAdd
    */
    readonly fileComment?: string
    
    /**
    * Timestamp of the message to add star to.
    * @type {string}
    * @memberof StarsApiAdd
    */
    readonly timestamp?: string
    
} & StarsAddRequest

/**
 * Request parameters for list operation in StarsApi.
 * @export
 * @interface StarsApiListRequest
 */
export type StarsApiListRequest = {
    
    /**
    * Authentication token. Requires scope: `stars:read`
    * @type {string}
    * @memberof StarsApiList
    */
    readonly token?: string
    
    /**
    * 
    * @type {string}
    * @memberof StarsApiList
    */
    readonly count?: string
    
    /**
    * 
    * @type {string}
    * @memberof StarsApiList
    */
    readonly page?: string
    
    /**
    * Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\'s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details.
    * @type {string}
    * @memberof StarsApiList
    */
    readonly cursor?: string
    
    /**
    * The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\'t been reached.
    * @type {number}
    * @memberof StarsApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for remove operation in StarsApi.
 * @export
 * @interface StarsApiRemoveRequest
 */
export type StarsApiRemoveRequest = {
    
    /**
    * Authentication token. Requires scope: `stars:write`
    * @type {string}
    * @memberof StarsApiRemove
    */
    readonly token: string
    
    /**
    * Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).
    * @type {string}
    * @memberof StarsApiRemove
    */
    readonly channel?: string
    
    /**
    * File to remove star from.
    * @type {string}
    * @memberof StarsApiRemove
    */
    readonly file?: string
    
    /**
    * File comment to remove star from.
    * @type {string}
    * @memberof StarsApiRemove
    */
    readonly fileComment?: string
    
    /**
    * Timestamp of the message to remove star from.
    * @type {string}
    * @memberof StarsApiRemove
    */
    readonly timestamp?: string
    
} & StarsRemoveRequest

/**
 * StarsApiGenerated - object-oriented interface
 * @export
 * @class StarsApiGenerated
 * @extends {BaseAPI}
 */
export class StarsApiGenerated extends BaseAPI {
    /**
     * Adds a star to an item.
     * @param {StarsApiAddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApiGenerated
     */
    public add(requestParameters: StarsApiAddRequest, options?: AxiosRequestConfig) {
        return StarsApiFp(this.configuration).add(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists stars for a user.
     * @param {StarsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApiGenerated
     */
    public list(requestParameters: StarsApiListRequest = {}, options?: AxiosRequestConfig) {
        return StarsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a star from an item.
     * @param {StarsApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApiGenerated
     */
    public remove(requestParameters: StarsApiRemoveRequest, options?: AxiosRequestConfig) {
        return StarsApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
