/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallsparticipantsAddNewParticipantRequest } from '../models';
// @ts-ignore
import { CallsparticipantsAddNewParticipantResponse } from '../models';
// @ts-ignore
import { CallsparticipantsAddNewParticipantdefaultResponse } from '../models';
// @ts-ignore
import { CallsparticipantsRegisterRemovedRequest } from '../models';
// @ts-ignore
import { CallsparticipantsRegisterRemovedResponse } from '../models';
// @ts-ignore
import { CallsparticipantsRegisterRemoveddefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CallsParticipantsApi - axios parameter creator
 * @export
 */
export const CallsParticipantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Registers new participants added to a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {string} users The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev).
         * @param {CallsparticipantsAddNewParticipantRequest} callsparticipantsAddNewParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewParticipant: async (token: string, id: string, users: string, callsparticipantsAddNewParticipantRequest: CallsparticipantsAddNewParticipantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('addNewParticipant', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addNewParticipant', 'id', id)
            // verify required parameter 'users' is not null or undefined
            assertParamExists('addNewParticipant', 'users', users)
            // verify required parameter 'callsparticipantsAddNewParticipantRequest' is not null or undefined
            assertParamExists('addNewParticipant', 'callsparticipantsAddNewParticipantRequest', callsparticipantsAddNewParticipantRequest)
            const localVarPath = `/calls.participants.add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
            if (users !== undefined) {
                await addFormParam('users', users, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsparticipantsAddNewParticipantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.participants.add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsparticipantsAddNewParticipantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers participants removed from a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {string} users The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev).
         * @param {CallsparticipantsRegisterRemovedRequest} callsparticipantsRegisterRemovedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemoved: async (token: string, id: string, users: string, callsparticipantsRegisterRemovedRequest: CallsparticipantsRegisterRemovedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('registerRemoved', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registerRemoved', 'id', id)
            // verify required parameter 'users' is not null or undefined
            assertParamExists('registerRemoved', 'users', users)
            // verify required parameter 'callsparticipantsRegisterRemovedRequest' is not null or undefined
            assertParamExists('registerRemoved', 'callsparticipantsRegisterRemovedRequest', callsparticipantsRegisterRemovedRequest)
            const localVarPath = `/calls.participants.remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
            if (users !== undefined) {
                await addFormParam('users', users, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsparticipantsRegisterRemovedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.participants.remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsparticipantsRegisterRemovedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallsParticipantsApi - functional programming interface
 * @export
 */
export const CallsParticipantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallsParticipantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Registers new participants added to a Call.
         * @param {CallsParticipantsApiAddNewParticipantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewParticipant(requestParameters: CallsParticipantsApiAddNewParticipantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsparticipantsAddNewParticipantResponse>> {
            const callsparticipantsAddNewParticipantRequest: CallsparticipantsAddNewParticipantRequest = {
                id: requestParameters.id,
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewParticipant(requestParameters.token, requestParameters.id, requestParameters.users, callsparticipantsAddNewParticipantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Registers participants removed from a Call.
         * @param {CallsParticipantsApiRegisterRemovedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerRemoved(requestParameters: CallsParticipantsApiRegisterRemovedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsparticipantsRegisterRemovedResponse>> {
            const callsparticipantsRegisterRemovedRequest: CallsparticipantsRegisterRemovedRequest = {
                id: requestParameters.id,
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerRemoved(requestParameters.token, requestParameters.id, requestParameters.users, callsparticipantsRegisterRemovedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallsParticipantsApi - factory interface
 * @export
 */
export const CallsParticipantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallsParticipantsApiFp(configuration)
    return {
        /**
         * Registers new participants added to a Call.
         * @param {CallsParticipantsApiAddNewParticipantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewParticipant(requestParameters: CallsParticipantsApiAddNewParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<CallsparticipantsAddNewParticipantResponse> {
            return localVarFp.addNewParticipant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers participants removed from a Call.
         * @param {CallsParticipantsApiRegisterRemovedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemoved(requestParameters: CallsParticipantsApiRegisterRemovedRequest, options?: AxiosRequestConfig): AxiosPromise<CallsparticipantsRegisterRemovedResponse> {
            return localVarFp.registerRemoved(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewParticipant operation in CallsParticipantsApi.
 * @export
 * @interface CallsParticipantsApiAddNewParticipantRequest
 */
export type CallsParticipantsApiAddNewParticipantRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsParticipantsApiAddNewParticipant
    */
    readonly token: string
    
    /**
    * `id` returned by the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsParticipantsApiAddNewParticipant
    */
    readonly id: string
    
    /**
    * The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev).
    * @type {string}
    * @memberof CallsParticipantsApiAddNewParticipant
    */
    readonly users: string
    
} & CallsparticipantsAddNewParticipantRequest

/**
 * Request parameters for registerRemoved operation in CallsParticipantsApi.
 * @export
 * @interface CallsParticipantsApiRegisterRemovedRequest
 */
export type CallsParticipantsApiRegisterRemovedRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsParticipantsApiRegisterRemoved
    */
    readonly token: string
    
    /**
    * `id` returned by the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsParticipantsApiRegisterRemoved
    */
    readonly id: string
    
    /**
    * The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev).
    * @type {string}
    * @memberof CallsParticipantsApiRegisterRemoved
    */
    readonly users: string
    
} & CallsparticipantsRegisterRemovedRequest

/**
 * CallsParticipantsApiGenerated - object-oriented interface
 * @export
 * @class CallsParticipantsApiGenerated
 * @extends {BaseAPI}
 */
export class CallsParticipantsApiGenerated extends BaseAPI {
    /**
     * Registers new participants added to a Call.
     * @param {CallsParticipantsApiAddNewParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsParticipantsApiGenerated
     */
    public addNewParticipant(requestParameters: CallsParticipantsApiAddNewParticipantRequest, options?: AxiosRequestConfig) {
        return CallsParticipantsApiFp(this.configuration).addNewParticipant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers participants removed from a Call.
     * @param {CallsParticipantsApiRegisterRemovedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsParticipantsApiGenerated
     */
    public registerRemoved(requestParameters: CallsParticipantsApiRegisterRemovedRequest, options?: AxiosRequestConfig) {
        return CallsParticipantsApiFp(this.configuration).registerRemoved(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
