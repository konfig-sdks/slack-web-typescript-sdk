/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdmininviteRequestsApproveRequestRequest } from '../models';
// @ts-ignore
import { AdmininviteRequestsApproveRequestResponse } from '../models';
// @ts-ignore
import { AdmininviteRequestsApproveRequestdefaultResponse } from '../models';
// @ts-ignore
import { AdmininviteRequestsDenyRequestResponse } from '../models';
// @ts-ignore
import { AdmininviteRequestsDenyRequestdefaultResponse } from '../models';
// @ts-ignore
import { AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse } from '../models';
// @ts-ignore
import { AdmininviteRequestsListPendingWorkspaceInviteRequestsdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminInviteRequestsApi - axios parameter creator
 * @export
 */
export const AdminInviteRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approve a workspace invite request.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
         * @param {AdmininviteRequestsApproveRequestRequest} [admininviteRequestsApproveRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveRequest: async (token: string, admininviteRequestsApproveRequestRequest?: AdmininviteRequestsApproveRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('approveRequest', 'token', token)
            const localVarPath = `/admin.inviteRequests.approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.invites:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: admininviteRequestsApproveRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.inviteRequests.approve',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(admininviteRequestsApproveRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deny a workspace invite request.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
         * @param {AdmininviteRequestsApproveRequestRequest} [admininviteRequestsApproveRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyRequest: async (token: string, admininviteRequestsApproveRequestRequest?: AdmininviteRequestsApproveRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('denyRequest', 'token', token)
            const localVarPath = `/admin.inviteRequests.deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.invites:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: admininviteRequestsApproveRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.inviteRequests.deny',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(admininviteRequestsApproveRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all pending workspace invite requests.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
         * @param {string} [teamId] ID for the workspace where the invite requests were made.
         * @param {string} [cursor] Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
         * @param {number} [limit] The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPendingWorkspaceInviteRequests: async (token: string, teamId?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listPendingWorkspaceInviteRequests', 'token', token)
            const localVarPath = `/admin.inviteRequests.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.invites:read"], configuration)
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.inviteRequests.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminInviteRequestsApi - functional programming interface
 * @export
 */
export const AdminInviteRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminInviteRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * Approve a workspace invite request.
         * @param {AdminInviteRequestsApiApproveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveRequest(requestParameters: AdminInviteRequestsApiApproveRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmininviteRequestsApproveRequestResponse>> {
            const admininviteRequestsApproveRequestRequest: AdmininviteRequestsApproveRequestRequest = {
                invite_request_id: requestParameters.invite_request_id,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveRequest(requestParameters.token, admininviteRequestsApproveRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deny a workspace invite request.
         * @param {AdminInviteRequestsApiDenyRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denyRequest(requestParameters: AdminInviteRequestsApiDenyRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmininviteRequestsDenyRequestResponse>> {
            const admininviteRequestsApproveRequestRequest: AdmininviteRequestsApproveRequestRequest = {
                invite_request_id: requestParameters.invite_request_id,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.denyRequest(requestParameters.token, admininviteRequestsApproveRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all pending workspace invite requests.
         * @param {AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPendingWorkspaceInviteRequests(requestParameters: AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPendingWorkspaceInviteRequests(requestParameters.token, requestParameters.teamId, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminInviteRequestsApi - factory interface
 * @export
 */
export const AdminInviteRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminInviteRequestsApiFp(configuration)
    return {
        /**
         * Approve a workspace invite request.
         * @param {AdminInviteRequestsApiApproveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveRequest(requestParameters: AdminInviteRequestsApiApproveRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AdmininviteRequestsApproveRequestResponse> {
            return localVarFp.approveRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deny a workspace invite request.
         * @param {AdminInviteRequestsApiDenyRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyRequest(requestParameters: AdminInviteRequestsApiDenyRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AdmininviteRequestsDenyRequestResponse> {
            return localVarFp.denyRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all pending workspace invite requests.
         * @param {AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPendingWorkspaceInviteRequests(requestParameters: AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> {
            return localVarFp.listPendingWorkspaceInviteRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveRequest operation in AdminInviteRequestsApi.
 * @export
 * @interface AdminInviteRequestsApiApproveRequestRequest
 */
export type AdminInviteRequestsApiApproveRequestRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.invites:write`
    * @type {string}
    * @memberof AdminInviteRequestsApiApproveRequest
    */
    readonly token: string
    
} & AdmininviteRequestsApproveRequestRequest

/**
 * Request parameters for denyRequest operation in AdminInviteRequestsApi.
 * @export
 * @interface AdminInviteRequestsApiDenyRequestRequest
 */
export type AdminInviteRequestsApiDenyRequestRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.invites:write`
    * @type {string}
    * @memberof AdminInviteRequestsApiDenyRequest
    */
    readonly token: string
    
} & AdmininviteRequestsApproveRequestRequest

/**
 * Request parameters for listPendingWorkspaceInviteRequests operation in AdminInviteRequestsApi.
 * @export
 * @interface AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest
 */
export type AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.invites:read`
    * @type {string}
    * @memberof AdminInviteRequestsApiListPendingWorkspaceInviteRequests
    */
    readonly token: string
    
    /**
    * ID for the workspace where the invite requests were made.
    * @type {string}
    * @memberof AdminInviteRequestsApiListPendingWorkspaceInviteRequests
    */
    readonly teamId?: string
    
    /**
    * Value of the `next_cursor` field sent as part of the previous API response
    * @type {string}
    * @memberof AdminInviteRequestsApiListPendingWorkspaceInviteRequests
    */
    readonly cursor?: string
    
    /**
    * The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    * @type {number}
    * @memberof AdminInviteRequestsApiListPendingWorkspaceInviteRequests
    */
    readonly limit?: number
    
}

/**
 * AdminInviteRequestsApiGenerated - object-oriented interface
 * @export
 * @class AdminInviteRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class AdminInviteRequestsApiGenerated extends BaseAPI {
    /**
     * Approve a workspace invite request.
     * @param {AdminInviteRequestsApiApproveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminInviteRequestsApiGenerated
     */
    public approveRequest(requestParameters: AdminInviteRequestsApiApproveRequestRequest, options?: AxiosRequestConfig) {
        return AdminInviteRequestsApiFp(this.configuration).approveRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deny a workspace invite request.
     * @param {AdminInviteRequestsApiDenyRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminInviteRequestsApiGenerated
     */
    public denyRequest(requestParameters: AdminInviteRequestsApiDenyRequestRequest, options?: AxiosRequestConfig) {
        return AdminInviteRequestsApiFp(this.configuration).denyRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all pending workspace invite requests.
     * @param {AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminInviteRequestsApiGenerated
     */
    public listPendingWorkspaceInviteRequests(requestParameters: AdminInviteRequestsApiListPendingWorkspaceInviteRequestsRequest, options?: AxiosRequestConfig) {
        return AdminInviteRequestsApiFp(this.configuration).listPendingWorkspaceInviteRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
