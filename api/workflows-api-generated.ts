/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkflowsStepCompletedResponse } from '../models';
// @ts-ignore
import { WorkflowsStepCompleteddefaultResponse } from '../models';
// @ts-ignore
import { WorkflowsStepFailedResponse } from '../models';
// @ts-ignore
import { WorkflowsStepFaileddefaultResponse } from '../models';
// @ts-ignore
import { WorkflowsUpdateStepResponse } from '../models';
// @ts-ignore
import { WorkflowsUpdateStepdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Indicate that an app\'s step in a workflow completed execution.
         * @param {string} token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
         * @param {string} workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
         * @param {string} [outputs] Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](https://slack.dev) array from your &#x60;workflow_step&#x60; object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepCompleted: async (token: string, workflowStepExecuteId: string, outputs?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('stepCompleted', 'token', token)
            // verify required parameter 'workflowStepExecuteId' is not null or undefined
            assertParamExists('stepCompleted', 'workflowStepExecuteId', workflowStepExecuteId)
            const localVarPath = `/workflows.stepCompleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["workflow.steps:execute"], configuration)
            if (workflowStepExecuteId !== undefined) {
                localVarQueryParameter['workflow_step_execute_id'] = workflowStepExecuteId;
            }

            if (outputs !== undefined) {
                localVarQueryParameter['outputs'] = outputs;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workflows.stepCompleted',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Indicate that an app\'s step in a workflow failed to execute.
         * @param {string} token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
         * @param {string} workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
         * @param {string} error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepFailed: async (token: string, workflowStepExecuteId: string, error: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('stepFailed', 'token', token)
            // verify required parameter 'workflowStepExecuteId' is not null or undefined
            assertParamExists('stepFailed', 'workflowStepExecuteId', workflowStepExecuteId)
            // verify required parameter 'error' is not null or undefined
            assertParamExists('stepFailed', 'error', error)
            const localVarPath = `/workflows.stepFailed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["workflow.steps:execute"], configuration)
            if (workflowStepExecuteId !== undefined) {
                localVarQueryParameter['workflow_step_execute_id'] = workflowStepExecuteId;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workflows.stepFailed',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the configuration for a workflow extension step.
         * @param {string} token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
         * @param {string} workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;.
         * @param {string} [inputs] A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](https://slack.dev).
         * @param {string} [outputs] An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
         * @param {string} [stepName] An optional field that can be used to override the step name that is shown in the Workflow Builder.
         * @param {string} [stepImageUrl] An optional field that can be used to override app image that is shown in the Workflow Builder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStep: async (token: string, workflowStepEditId: string, inputs?: string, outputs?: string, stepName?: string, stepImageUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('updateStep', 'token', token)
            // verify required parameter 'workflowStepEditId' is not null or undefined
            assertParamExists('updateStep', 'workflowStepEditId', workflowStepEditId)
            const localVarPath = `/workflows.updateStep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["workflow.steps:execute"], configuration)
            if (workflowStepEditId !== undefined) {
                localVarQueryParameter['workflow_step_edit_id'] = workflowStepEditId;
            }

            if (inputs !== undefined) {
                localVarQueryParameter['inputs'] = inputs;
            }

            if (outputs !== undefined) {
                localVarQueryParameter['outputs'] = outputs;
            }

            if (stepName !== undefined) {
                localVarQueryParameter['step_name'] = stepName;
            }

            if (stepImageUrl !== undefined) {
                localVarQueryParameter['step_image_url'] = stepImageUrl;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workflows.updateStep',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Indicate that an app\'s step in a workflow completed execution.
         * @param {WorkflowsApiStepCompletedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stepCompleted(requestParameters: WorkflowsApiStepCompletedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowsStepCompletedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stepCompleted(requestParameters.token, requestParameters.workflowStepExecuteId, requestParameters.outputs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Indicate that an app\'s step in a workflow failed to execute.
         * @param {WorkflowsApiStepFailedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stepFailed(requestParameters: WorkflowsApiStepFailedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowsStepFailedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stepFailed(requestParameters.token, requestParameters.workflowStepExecuteId, requestParameters.error, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the configuration for a workflow extension step.
         * @param {WorkflowsApiUpdateStepRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStep(requestParameters: WorkflowsApiUpdateStepRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowsUpdateStepResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStep(requestParameters.token, requestParameters.workflowStepEditId, requestParameters.inputs, requestParameters.outputs, requestParameters.stepName, requestParameters.stepImageUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         * Indicate that an app\'s step in a workflow completed execution.
         * @param {WorkflowsApiStepCompletedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepCompleted(requestParameters: WorkflowsApiStepCompletedRequest, options?: AxiosRequestConfig): AxiosPromise<WorkflowsStepCompletedResponse> {
            return localVarFp.stepCompleted(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Indicate that an app\'s step in a workflow failed to execute.
         * @param {WorkflowsApiStepFailedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepFailed(requestParameters: WorkflowsApiStepFailedRequest, options?: AxiosRequestConfig): AxiosPromise<WorkflowsStepFailedResponse> {
            return localVarFp.stepFailed(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the configuration for a workflow extension step.
         * @param {WorkflowsApiUpdateStepRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStep(requestParameters: WorkflowsApiUpdateStepRequest, options?: AxiosRequestConfig): AxiosPromise<WorkflowsUpdateStepResponse> {
            return localVarFp.updateStep(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for stepCompleted operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiStepCompletedRequest
 */
export type WorkflowsApiStepCompletedRequest = {
    
    /**
    * Authentication token. Requires scope: `workflow.steps:execute`
    * @type {string}
    * @memberof WorkflowsApiStepCompleted
    */
    readonly token: string
    
    /**
    * Context identifier that maps to the correct workflow step execution.
    * @type {string}
    * @memberof WorkflowsApiStepCompleted
    */
    readonly workflowStepExecuteId: string
    
    /**
    * Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](https://slack.dev) array from your `workflow_step` object.
    * @type {string}
    * @memberof WorkflowsApiStepCompleted
    */
    readonly outputs?: string
    
}

/**
 * Request parameters for stepFailed operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiStepFailedRequest
 */
export type WorkflowsApiStepFailedRequest = {
    
    /**
    * Authentication token. Requires scope: `workflow.steps:execute`
    * @type {string}
    * @memberof WorkflowsApiStepFailed
    */
    readonly token: string
    
    /**
    * Context identifier that maps to the correct workflow step execution.
    * @type {string}
    * @memberof WorkflowsApiStepFailed
    */
    readonly workflowStepExecuteId: string
    
    /**
    * A JSON-based object with a `message` property that should contain a human readable error message.
    * @type {string}
    * @memberof WorkflowsApiStepFailed
    */
    readonly error: string
    
}

/**
 * Request parameters for updateStep operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiUpdateStepRequest
 */
export type WorkflowsApiUpdateStepRequest = {
    
    /**
    * Authentication token. Requires scope: `workflow.steps:execute`
    * @type {string}
    * @memberof WorkflowsApiUpdateStep
    */
    readonly token: string
    
    /**
    * A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.
    * @type {string}
    * @memberof WorkflowsApiUpdateStep
    */
    readonly workflowStepEditId: string
    
    /**
    * A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](https://slack.dev).
    * @type {string}
    * @memberof WorkflowsApiUpdateStep
    */
    readonly inputs?: string
    
    /**
    * An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
    * @type {string}
    * @memberof WorkflowsApiUpdateStep
    */
    readonly outputs?: string
    
    /**
    * An optional field that can be used to override the step name that is shown in the Workflow Builder.
    * @type {string}
    * @memberof WorkflowsApiUpdateStep
    */
    readonly stepName?: string
    
    /**
    * An optional field that can be used to override app image that is shown in the Workflow Builder.
    * @type {string}
    * @memberof WorkflowsApiUpdateStep
    */
    readonly stepImageUrl?: string
    
}

/**
 * WorkflowsApiGenerated - object-oriented interface
 * @export
 * @class WorkflowsApiGenerated
 * @extends {BaseAPI}
 */
export class WorkflowsApiGenerated extends BaseAPI {
    /**
     * Indicate that an app\'s step in a workflow completed execution.
     * @param {WorkflowsApiStepCompletedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public stepCompleted(requestParameters: WorkflowsApiStepCompletedRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).stepCompleted(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Indicate that an app\'s step in a workflow failed to execute.
     * @param {WorkflowsApiStepFailedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public stepFailed(requestParameters: WorkflowsApiStepFailedRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).stepFailed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the configuration for a workflow extension step.
     * @param {WorkflowsApiUpdateStepRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public updateStep(requestParameters: WorkflowsApiUpdateStepRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).updateStep(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
