/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppspermissionsAdditionalScopesRequestResponse } from '../models';
// @ts-ignore
import { AppspermissionsAdditionalScopesRequestdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsListPermissionsResponse } from '../models';
// @ts-ignore
import { AppspermissionsListPermissionsdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsPermissionsApi - axios parameter creator
 * @export
 */
export const AppsPermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows an app to request additional scopes
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} scopes A comma separated list of scopes to request for
         * @param {string} triggerId Token used to trigger the permissions API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalScopesRequest: async (token: string, scopes: string, triggerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('additionalScopesRequest', 'token', token)
            // verify required parameter 'scopes' is not null or undefined
            assertParamExists('additionalScopesRequest', 'scopes', scopes)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('additionalScopesRequest', 'triggerId', triggerId)
            const localVarPath = `/apps.permissions.request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (scopes !== undefined) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (triggerId !== undefined) {
                localVarQueryParameter['trigger_id'] = triggerId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.request',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of permissions this app has on a team.
         * @param {string} [token] Authentication token. Requires scope: &#x60;none&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apps.permissions.info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsPermissionsApi - functional programming interface
 * @export
 */
export const AppsPermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsPermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows an app to request additional scopes
         * @param {AppsPermissionsApiAdditionalScopesRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async additionalScopesRequest(requestParameters: AppsPermissionsApiAdditionalScopesRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsAdditionalScopesRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.additionalScopesRequest(requestParameters.token, requestParameters.scopes, requestParameters.triggerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns list of permissions this app has on a team.
         * @param {AppsPermissionsApiListPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPermissions(requestParameters: AppsPermissionsApiListPermissionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsListPermissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPermissions(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsPermissionsApi - factory interface
 * @export
 */
export const AppsPermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsPermissionsApiFp(configuration)
    return {
        /**
         * Allows an app to request additional scopes
         * @param {AppsPermissionsApiAdditionalScopesRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalScopesRequest(requestParameters: AppsPermissionsApiAdditionalScopesRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsAdditionalScopesRequestResponse> {
            return localVarFp.additionalScopesRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of permissions this app has on a team.
         * @param {AppsPermissionsApiListPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions(requestParameters: AppsPermissionsApiListPermissionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsListPermissionsResponse> {
            return localVarFp.listPermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for additionalScopesRequest operation in AppsPermissionsApi.
 * @export
 * @interface AppsPermissionsApiAdditionalScopesRequestRequest
 */
export type AppsPermissionsApiAdditionalScopesRequestRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsPermissionsApiAdditionalScopesRequest
    */
    readonly token: string
    
    /**
    * A comma separated list of scopes to request for
    * @type {string}
    * @memberof AppsPermissionsApiAdditionalScopesRequest
    */
    readonly scopes: string
    
    /**
    * Token used to trigger the permissions API
    * @type {string}
    * @memberof AppsPermissionsApiAdditionalScopesRequest
    */
    readonly triggerId: string
    
}

/**
 * Request parameters for listPermissions operation in AppsPermissionsApi.
 * @export
 * @interface AppsPermissionsApiListPermissionsRequest
 */
export type AppsPermissionsApiListPermissionsRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsPermissionsApiListPermissions
    */
    readonly token?: string
    
}

/**
 * AppsPermissionsApiGenerated - object-oriented interface
 * @export
 * @class AppsPermissionsApiGenerated
 * @extends {BaseAPI}
 */
export class AppsPermissionsApiGenerated extends BaseAPI {
    /**
     * Allows an app to request additional scopes
     * @param {AppsPermissionsApiAdditionalScopesRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsPermissionsApiGenerated
     */
    public additionalScopesRequest(requestParameters: AppsPermissionsApiAdditionalScopesRequestRequest, options?: AxiosRequestConfig) {
        return AppsPermissionsApiFp(this.configuration).additionalScopesRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of permissions this app has on a team.
     * @param {AppsPermissionsApiListPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsPermissionsApiGenerated
     */
    public listPermissions(requestParameters: AppsPermissionsApiListPermissionsRequest = {}, options?: AxiosRequestConfig) {
        return AppsPermissionsApiFp(this.configuration).listPermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
