/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DndEndDndResponse } from '../models';
// @ts-ignore
import { DndEndDnddefaultResponse } from '../models';
// @ts-ignore
import { DndEndSnoozeResponse } from '../models';
// @ts-ignore
import { DndEndSnoozedefaultResponse } from '../models';
// @ts-ignore
import { DndInfoResponse } from '../models';
// @ts-ignore
import { DndInfodefaultResponse } from '../models';
// @ts-ignore
import { DndSetSnoozeRequest } from '../models';
// @ts-ignore
import { DndSetSnoozeResponse } from '../models';
// @ts-ignore
import { DndSetSnoozedefaultResponse } from '../models';
// @ts-ignore
import { DndTeamInfoResponse } from '../models';
// @ts-ignore
import { DndTeamInfodefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DndApi - axios parameter creator
 * @export
 */
export const DndApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ends the current user\'s Do Not Disturb session immediately.
         * @param {string} token Authentication token. Requires scope: &#x60;dnd:write&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endDnd: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('endDnd', 'token', token)
            const localVarPath = `/dnd.endDnd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["dnd:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dnd.endDnd',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ends the current user\'s snooze mode immediately.
         * @param {string} token Authentication token. Requires scope: &#x60;dnd:write&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endSnooze: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('endSnooze', 'token', token)
            const localVarPath = `/dnd.endSnooze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["dnd:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dnd.endSnooze',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a user\'s current Do Not Disturb status.
         * @param {string} [token] Authentication token. Requires scope: &#x60;dnd:read&#x60;
         * @param {string} [user] User to fetch status for (defaults to current user)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info: async (token?: string, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dnd.info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["dnd:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dnd.info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Turns on Do Not Disturb mode for the current user, or changes its duration.
         * @param {string} numMinutes Number of minutes, from now, to snooze until.
         * @param {string} token Authentication token. Requires scope: &#x60;dnd:write&#x60;
         * @param {DndSetSnoozeRequest} dndSetSnoozeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSnooze: async (numMinutes: string, token: string, dndSetSnoozeRequest: DndSetSnoozeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'numMinutes' is not null or undefined
            assertParamExists('setSnooze', 'numMinutes', numMinutes)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setSnooze', 'token', token)
            // verify required parameter 'dndSetSnoozeRequest' is not null or undefined
            assertParamExists('setSnooze', 'dndSetSnoozeRequest', dndSetSnoozeRequest)
            const localVarPath = `/dnd.setSnooze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["dnd:write"], configuration)

            if (numMinutes !== undefined) {
                await addFormParam('num_minutes', numMinutes, false, true)
            }
    
            if (token !== undefined) {
                await addFormParam('token', token, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dndSetSnoozeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dnd.setSnooze',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dndSetSnoozeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Do Not Disturb status for up to 50 users on a team.
         * @param {string} [token] Authentication token. Requires scope: &#x60;dnd:read&#x60;
         * @param {string} [users] Comma-separated list of users to fetch Do Not Disturb status for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamInfo: async (token?: string, users?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dnd.teamInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["dnd:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (users !== undefined) {
                localVarQueryParameter['users'] = users;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dnd.teamInfo',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DndApi - functional programming interface
 * @export
 */
export const DndApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DndApiAxiosParamCreator(configuration)
    return {
        /**
         * Ends the current user\'s Do Not Disturb session immediately.
         * @param {DndApiEndDndRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endDnd(requestParameters: DndApiEndDndRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DndEndDndResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endDnd(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Ends the current user\'s snooze mode immediately.
         * @param {DndApiEndSnoozeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endSnooze(requestParameters: DndApiEndSnoozeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DndEndSnoozeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endSnooze(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a user\'s current Do Not Disturb status.
         * @param {DndApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async info(requestParameters: DndApiInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DndInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.info(requestParameters.token, requestParameters.user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Turns on Do Not Disturb mode for the current user, or changes its duration.
         * @param {DndApiSetSnoozeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSnooze(requestParameters: DndApiSetSnoozeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DndSetSnoozeResponse>> {
            const dndSetSnoozeRequest: DndSetSnoozeRequest = {
                num_minutes: requestParameters.num_minutes,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSnooze(requestParameters.numMinutes, requestParameters.token, dndSetSnoozeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the Do Not Disturb status for up to 50 users on a team.
         * @param {DndApiTeamInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamInfo(requestParameters: DndApiTeamInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DndTeamInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamInfo(requestParameters.token, requestParameters.users, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DndApi - factory interface
 * @export
 */
export const DndApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DndApiFp(configuration)
    return {
        /**
         * Ends the current user\'s Do Not Disturb session immediately.
         * @param {DndApiEndDndRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endDnd(requestParameters: DndApiEndDndRequest, options?: AxiosRequestConfig): AxiosPromise<DndEndDndResponse> {
            return localVarFp.endDnd(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Ends the current user\'s snooze mode immediately.
         * @param {DndApiEndSnoozeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endSnooze(requestParameters: DndApiEndSnoozeRequest, options?: AxiosRequestConfig): AxiosPromise<DndEndSnoozeResponse> {
            return localVarFp.endSnooze(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a user\'s current Do Not Disturb status.
         * @param {DndApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info(requestParameters: DndApiInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DndInfoResponse> {
            return localVarFp.info(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Turns on Do Not Disturb mode for the current user, or changes its duration.
         * @param {DndApiSetSnoozeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSnooze(requestParameters: DndApiSetSnoozeRequest, options?: AxiosRequestConfig): AxiosPromise<DndSetSnoozeResponse> {
            return localVarFp.setSnooze(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the Do Not Disturb status for up to 50 users on a team.
         * @param {DndApiTeamInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamInfo(requestParameters: DndApiTeamInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DndTeamInfoResponse> {
            return localVarFp.teamInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for endDnd operation in DndApi.
 * @export
 * @interface DndApiEndDndRequest
 */
export type DndApiEndDndRequest = {
    
    /**
    * Authentication token. Requires scope: `dnd:write`
    * @type {string}
    * @memberof DndApiEndDnd
    */
    readonly token: string
    
}

/**
 * Request parameters for endSnooze operation in DndApi.
 * @export
 * @interface DndApiEndSnoozeRequest
 */
export type DndApiEndSnoozeRequest = {
    
    /**
    * Authentication token. Requires scope: `dnd:write`
    * @type {string}
    * @memberof DndApiEndSnooze
    */
    readonly token: string
    
}

/**
 * Request parameters for info operation in DndApi.
 * @export
 * @interface DndApiInfoRequest
 */
export type DndApiInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `dnd:read`
    * @type {string}
    * @memberof DndApiInfo
    */
    readonly token?: string
    
    /**
    * User to fetch status for (defaults to current user)
    * @type {string}
    * @memberof DndApiInfo
    */
    readonly user?: string
    
}

/**
 * Request parameters for setSnooze operation in DndApi.
 * @export
 * @interface DndApiSetSnoozeRequest
 */
export type DndApiSetSnoozeRequest = {
    
    /**
    * Number of minutes, from now, to snooze until.
    * @type {string}
    * @memberof DndApiSetSnooze
    */
    readonly numMinutes: string
    
    /**
    * Authentication token. Requires scope: `dnd:write`
    * @type {string}
    * @memberof DndApiSetSnooze
    */
    readonly token: string
    
} & DndSetSnoozeRequest

/**
 * Request parameters for teamInfo operation in DndApi.
 * @export
 * @interface DndApiTeamInfoRequest
 */
export type DndApiTeamInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `dnd:read`
    * @type {string}
    * @memberof DndApiTeamInfo
    */
    readonly token?: string
    
    /**
    * Comma-separated list of users to fetch Do Not Disturb status for
    * @type {string}
    * @memberof DndApiTeamInfo
    */
    readonly users?: string
    
}

/**
 * DndApiGenerated - object-oriented interface
 * @export
 * @class DndApiGenerated
 * @extends {BaseAPI}
 */
export class DndApiGenerated extends BaseAPI {
    /**
     * Ends the current user\'s Do Not Disturb session immediately.
     * @param {DndApiEndDndRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DndApiGenerated
     */
    public endDnd(requestParameters: DndApiEndDndRequest, options?: AxiosRequestConfig) {
        return DndApiFp(this.configuration).endDnd(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ends the current user\'s snooze mode immediately.
     * @param {DndApiEndSnoozeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DndApiGenerated
     */
    public endSnooze(requestParameters: DndApiEndSnoozeRequest, options?: AxiosRequestConfig) {
        return DndApiFp(this.configuration).endSnooze(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a user\'s current Do Not Disturb status.
     * @param {DndApiInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DndApiGenerated
     */
    public info(requestParameters: DndApiInfoRequest = {}, options?: AxiosRequestConfig) {
        return DndApiFp(this.configuration).info(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     * @param {DndApiSetSnoozeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DndApiGenerated
     */
    public setSnooze(requestParameters: DndApiSetSnoozeRequest, options?: AxiosRequestConfig) {
        return DndApiFp(this.configuration).setSnooze(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     * @param {DndApiTeamInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DndApiGenerated
     */
    public teamInfo(requestParameters: DndApiTeamInfoRequest = {}, options?: AxiosRequestConfig) {
        return DndApiFp(this.configuration).teamInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
