/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallsAddRequest } from '../models';
// @ts-ignore
import { CallsAddResponse } from '../models';
// @ts-ignore
import { CallsAdddefaultResponse } from '../models';
// @ts-ignore
import { CallsEndRequest } from '../models';
// @ts-ignore
import { CallsEndResponse } from '../models';
// @ts-ignore
import { CallsEnddefaultResponse } from '../models';
// @ts-ignore
import { CallsInfoResponse } from '../models';
// @ts-ignore
import { CallsInfodefaultResponse } from '../models';
// @ts-ignore
import { CallsUpdateRequest } from '../models';
// @ts-ignore
import { CallsUpdateResponse } from '../models';
// @ts-ignore
import { CallsUpdatedefaultResponse } from '../models';
// @ts-ignore
import { CallsparticipantsAddNewParticipantRequest } from '../models';
// @ts-ignore
import { CallsparticipantsAddNewParticipantResponse } from '../models';
// @ts-ignore
import { CallsparticipantsAddNewParticipantdefaultResponse } from '../models';
// @ts-ignore
import { CallsparticipantsRegisterRemovedRequest } from '../models';
// @ts-ignore
import { CallsparticipantsRegisterRemovedResponse } from '../models';
// @ts-ignore
import { CallsparticipantsRegisterRemoveddefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CallsApi - axios parameter creator
 * @export
 */
export const CallsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Registers a new Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
         * @param {string} joinUrl The URL required for a client to join the Call.
         * @param {CallsAddRequest} callsAddRequest 
         * @param {string} [title] The name of the Call.
         * @param {string} [createdBy] The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required.
         * @param {number} [dateStart] Call start time in UTC UNIX timestamp format
         * @param {string} [desktopAppJoinUrl] When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
         * @param {string} [externalDisplayId] An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
         * @param {string} [users] The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (token: string, externalUniqueId: string, joinUrl: string, callsAddRequest: CallsAddRequest, title?: string, createdBy?: string, dateStart?: number, desktopAppJoinUrl?: string, externalDisplayId?: string, users?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('add', 'token', token)
            // verify required parameter 'externalUniqueId' is not null or undefined
            assertParamExists('add', 'externalUniqueId', externalUniqueId)
            // verify required parameter 'joinUrl' is not null or undefined
            assertParamExists('add', 'joinUrl', joinUrl)
            // verify required parameter 'callsAddRequest' is not null or undefined
            assertParamExists('add', 'callsAddRequest', callsAddRequest)
            const localVarPath = `/calls.add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (title !== undefined) {
                await addFormParam('title', title, false, true)
            }
    
            if (createdBy !== undefined) {
                await addFormParam('created_by', createdBy, false, true)
            }
    
            if (dateStart !== undefined) {
                await addFormParam('date_start', dateStart, false, true)
            }
    
            if (desktopAppJoinUrl !== undefined) {
                await addFormParam('desktop_app_join_url', desktopAppJoinUrl, false, true)
            }
    
            if (externalDisplayId !== undefined) {
                await addFormParam('external_display_id', externalDisplayId, false, true)
            }
    
            if (externalUniqueId !== undefined) {
                await addFormParam('external_unique_id', externalUniqueId, false, true)
            }
    
            if (joinUrl !== undefined) {
                await addFormParam('join_url', joinUrl, false, true)
            }
    
            if (users !== undefined) {
                await addFormParam('users', users, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsAddRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsAddRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers new participants added to a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {string} users The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev).
         * @param {CallsparticipantsAddNewParticipantRequest} callsparticipantsAddNewParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewParticipant: async (token: string, id: string, users: string, callsparticipantsAddNewParticipantRequest: CallsparticipantsAddNewParticipantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('addNewParticipant', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addNewParticipant', 'id', id)
            // verify required parameter 'users' is not null or undefined
            assertParamExists('addNewParticipant', 'users', users)
            // verify required parameter 'callsparticipantsAddNewParticipantRequest' is not null or undefined
            assertParamExists('addNewParticipant', 'callsparticipantsAddNewParticipantRequest', callsparticipantsAddNewParticipantRequest)
            const localVarPath = `/calls.participants.add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
            if (users !== undefined) {
                await addFormParam('users', users, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsparticipantsAddNewParticipantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.participants.add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsparticipantsAddNewParticipantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ends a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {CallsEndRequest} callsEndRequest 
         * @param {number} [duration] Call duration in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        end: async (token: string, id: string, callsEndRequest: CallsEndRequest, duration?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('end', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('end', 'id', id)
            // verify required parameter 'callsEndRequest' is not null or undefined
            assertParamExists('end', 'callsEndRequest', callsEndRequest)
            const localVarPath = `/calls.end`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (duration !== undefined) {
                await addFormParam('duration', duration, false, true)
            }
    
            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsEndRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.end',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsEndRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:read&#x60;
         * @param {string} id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info: async (token: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('info', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('info', 'id', id)
            const localVarPath = `/calls.info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:read"], configuration)
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers participants removed from a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {string} users The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev).
         * @param {CallsparticipantsRegisterRemovedRequest} callsparticipantsRegisterRemovedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemoved: async (token: string, id: string, users: string, callsparticipantsRegisterRemovedRequest: CallsparticipantsRegisterRemovedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('registerRemoved', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registerRemoved', 'id', id)
            // verify required parameter 'users' is not null or undefined
            assertParamExists('registerRemoved', 'users', users)
            // verify required parameter 'callsparticipantsRegisterRemovedRequest' is not null or undefined
            assertParamExists('registerRemoved', 'callsparticipantsRegisterRemovedRequest', callsparticipantsRegisterRemovedRequest)
            const localVarPath = `/calls.participants.remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
            if (users !== undefined) {
                await addFormParam('users', users, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsparticipantsRegisterRemovedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.participants.remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsparticipantsRegisterRemovedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates information about a Call.
         * @param {string} token Authentication token. Requires scope: &#x60;calls:write&#x60;
         * @param {string} id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method.
         * @param {CallsUpdateRequest} callsUpdateRequest 
         * @param {string} [title] The name of the Call.
         * @param {string} [desktopAppJoinUrl] When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
         * @param {string} [joinUrl] The URL required for a client to join the Call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (token: string, id: string, callsUpdateRequest: CallsUpdateRequest, title?: string, desktopAppJoinUrl?: string, joinUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('update', 'token', token)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'callsUpdateRequest' is not null or undefined
            assertParamExists('update', 'callsUpdateRequest', callsUpdateRequest)
            const localVarPath = `/calls.update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["calls:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (title !== undefined) {
                await addFormParam('title', title, false, true)
            }
    
            if (desktopAppJoinUrl !== undefined) {
                await addFormParam('desktop_app_join_url', desktopAppJoinUrl, false, true)
            }
    
            if (id !== undefined) {
                await addFormParam('id', id, false, true)
            }
    
            if (joinUrl !== undefined) {
                await addFormParam('join_url', joinUrl, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: callsUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/calls.update',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(callsUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallsApi - functional programming interface
 * @export
 */
export const CallsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallsApiAxiosParamCreator(configuration)
    return {
        /**
         * Registers a new Call.
         * @param {CallsApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(requestParameters: CallsApiAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsAddResponse>> {
            const callsAddRequest: CallsAddRequest = {
                title: requestParameters.title,
                created_by: requestParameters.created_by,
                date_start: requestParameters.date_start,
                desktop_app_join_url: requestParameters.desktop_app_join_url,
                external_display_id: requestParameters.external_display_id,
                external_unique_id: requestParameters.external_unique_id,
                join_url: requestParameters.join_url,
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(requestParameters.token, requestParameters.externalUniqueId, requestParameters.joinUrl, callsAddRequest, requestParameters.title, requestParameters.createdBy, requestParameters.dateStart, requestParameters.desktopAppJoinUrl, requestParameters.externalDisplayId, requestParameters.users, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Registers new participants added to a Call.
         * @param {CallsApiAddNewParticipantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewParticipant(requestParameters: CallsApiAddNewParticipantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsparticipantsAddNewParticipantResponse>> {
            const callsparticipantsAddNewParticipantRequest: CallsparticipantsAddNewParticipantRequest = {
                id: requestParameters.id,
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewParticipant(requestParameters.token, requestParameters.id, requestParameters.users, callsparticipantsAddNewParticipantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Ends a Call.
         * @param {CallsApiEndRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async end(requestParameters: CallsApiEndRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsEndResponse>> {
            const callsEndRequest: CallsEndRequest = {
                duration: requestParameters.duration,
                id: requestParameters.id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.end(requestParameters.token, requestParameters.id, callsEndRequest, requestParameters.duration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a Call.
         * @param {CallsApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async info(requestParameters: CallsApiInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.info(requestParameters.token, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Registers participants removed from a Call.
         * @param {CallsApiRegisterRemovedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerRemoved(requestParameters: CallsApiRegisterRemovedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsparticipantsRegisterRemovedResponse>> {
            const callsparticipantsRegisterRemovedRequest: CallsparticipantsRegisterRemovedRequest = {
                id: requestParameters.id,
                users: requestParameters.users
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerRemoved(requestParameters.token, requestParameters.id, requestParameters.users, callsparticipantsRegisterRemovedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates information about a Call.
         * @param {CallsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: CallsApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallsUpdateResponse>> {
            const callsUpdateRequest: CallsUpdateRequest = {
                title: requestParameters.title,
                desktop_app_join_url: requestParameters.desktop_app_join_url,
                id: requestParameters.id,
                join_url: requestParameters.join_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.token, requestParameters.id, callsUpdateRequest, requestParameters.title, requestParameters.desktopAppJoinUrl, requestParameters.joinUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallsApi - factory interface
 * @export
 */
export const CallsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallsApiFp(configuration)
    return {
        /**
         * Registers a new Call.
         * @param {CallsApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(requestParameters: CallsApiAddRequest, options?: AxiosRequestConfig): AxiosPromise<CallsAddResponse> {
            return localVarFp.add(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers new participants added to a Call.
         * @param {CallsApiAddNewParticipantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewParticipant(requestParameters: CallsApiAddNewParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<CallsparticipantsAddNewParticipantResponse> {
            return localVarFp.addNewParticipant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Ends a Call.
         * @param {CallsApiEndRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        end(requestParameters: CallsApiEndRequest, options?: AxiosRequestConfig): AxiosPromise<CallsEndResponse> {
            return localVarFp.end(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a Call.
         * @param {CallsApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info(requestParameters: CallsApiInfoRequest, options?: AxiosRequestConfig): AxiosPromise<CallsInfoResponse> {
            return localVarFp.info(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers participants removed from a Call.
         * @param {CallsApiRegisterRemovedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemoved(requestParameters: CallsApiRegisterRemovedRequest, options?: AxiosRequestConfig): AxiosPromise<CallsparticipantsRegisterRemovedResponse> {
            return localVarFp.registerRemoved(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates information about a Call.
         * @param {CallsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: CallsApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<CallsUpdateResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for add operation in CallsApi.
 * @export
 * @interface CallsApiAddRequest
 */
export type CallsApiAddRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly token: string
    
    /**
    * An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly externalUniqueId: string
    
    /**
    * The URL required for a client to join the Call.
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly joinUrl: string
    
    /**
    * The name of the Call.
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly title?: string
    
    /**
    * The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly createdBy?: string
    
    /**
    * Call start time in UTC UNIX timestamp format
    * @type {number}
    * @memberof CallsApiAdd
    */
    readonly dateStart?: number
    
    /**
    * When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly desktopAppJoinUrl?: string
    
    /**
    * An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly externalDisplayId?: string
    
    /**
    * The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev).
    * @type {string}
    * @memberof CallsApiAdd
    */
    readonly users?: string
    
} & CallsAddRequest

/**
 * Request parameters for addNewParticipant operation in CallsApi.
 * @export
 * @interface CallsApiAddNewParticipantRequest
 */
export type CallsApiAddNewParticipantRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsApiAddNewParticipant
    */
    readonly token: string
    
    /**
    * `id` returned by the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsApiAddNewParticipant
    */
    readonly id: string
    
    /**
    * The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev).
    * @type {string}
    * @memberof CallsApiAddNewParticipant
    */
    readonly users: string
    
} & CallsparticipantsAddNewParticipantRequest

/**
 * Request parameters for end operation in CallsApi.
 * @export
 * @interface CallsApiEndRequest
 */
export type CallsApiEndRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsApiEnd
    */
    readonly token: string
    
    /**
    * `id` returned when registering the call using the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsApiEnd
    */
    readonly id: string
    
    /**
    * Call duration in seconds
    * @type {number}
    * @memberof CallsApiEnd
    */
    readonly duration?: number
    
} & CallsEndRequest

/**
 * Request parameters for info operation in CallsApi.
 * @export
 * @interface CallsApiInfoRequest
 */
export type CallsApiInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:read`
    * @type {string}
    * @memberof CallsApiInfo
    */
    readonly token: string
    
    /**
    * `id` of the Call returned by the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsApiInfo
    */
    readonly id: string
    
}

/**
 * Request parameters for registerRemoved operation in CallsApi.
 * @export
 * @interface CallsApiRegisterRemovedRequest
 */
export type CallsApiRegisterRemovedRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsApiRegisterRemoved
    */
    readonly token: string
    
    /**
    * `id` returned by the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsApiRegisterRemoved
    */
    readonly id: string
    
    /**
    * The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev).
    * @type {string}
    * @memberof CallsApiRegisterRemoved
    */
    readonly users: string
    
} & CallsparticipantsRegisterRemovedRequest

/**
 * Request parameters for update operation in CallsApi.
 * @export
 * @interface CallsApiUpdateRequest
 */
export type CallsApiUpdateRequest = {
    
    /**
    * Authentication token. Requires scope: `calls:write`
    * @type {string}
    * @memberof CallsApiUpdate
    */
    readonly token: string
    
    /**
    * `id` returned by the [`calls.add`](https://slack.dev) method.
    * @type {string}
    * @memberof CallsApiUpdate
    */
    readonly id: string
    
    /**
    * The name of the Call.
    * @type {string}
    * @memberof CallsApiUpdate
    */
    readonly title?: string
    
    /**
    * When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    * @type {string}
    * @memberof CallsApiUpdate
    */
    readonly desktopAppJoinUrl?: string
    
    /**
    * The URL required for a client to join the Call.
    * @type {string}
    * @memberof CallsApiUpdate
    */
    readonly joinUrl?: string
    
} & CallsUpdateRequest

/**
 * CallsApiGenerated - object-oriented interface
 * @export
 * @class CallsApiGenerated
 * @extends {BaseAPI}
 */
export class CallsApiGenerated extends BaseAPI {
    /**
     * Registers a new Call.
     * @param {CallsApiAddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApiGenerated
     */
    public add(requestParameters: CallsApiAddRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).add(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers new participants added to a Call.
     * @param {CallsApiAddNewParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApiGenerated
     */
    public addNewParticipant(requestParameters: CallsApiAddNewParticipantRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).addNewParticipant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ends a Call.
     * @param {CallsApiEndRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApiGenerated
     */
    public end(requestParameters: CallsApiEndRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).end(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a Call.
     * @param {CallsApiInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApiGenerated
     */
    public info(requestParameters: CallsApiInfoRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).info(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers participants removed from a Call.
     * @param {CallsApiRegisterRemovedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApiGenerated
     */
    public registerRemoved(requestParameters: CallsApiRegisterRemovedRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).registerRemoved(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates information about a Call.
     * @param {CallsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallsApiGenerated
     */
    public update(requestParameters: CallsApiUpdateRequest, options?: AxiosRequestConfig) {
        return CallsApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
