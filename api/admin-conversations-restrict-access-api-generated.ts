/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminconversationsrestrictAccessAddGroupIdpGroupsRequest } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessAddGroupIdpGroupsResponse } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessAddGroupIdpGroupsdefaultResponse } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessListGroupsResponse } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessListGroupsdefaultResponse } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessRemoveIdpGroupRequest } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessRemoveIdpGroupResponse } from '../models';
// @ts-ignore
import { AdminconversationsrestrictAccessRemoveIdpGroupdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminConversationsRestrictAccessApi - axios parameter creator
 * @export
 */
export const AdminConversationsRestrictAccessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an allowlist of IDP groups for accessing a channel
         * @param {string} channelId The channel to link this group to.
         * @param {string} groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
         * @param {AdminconversationsrestrictAccessAddGroupIdpGroupsRequest} adminconversationsrestrictAccessAddGroupIdpGroupsRequest 
         * @param {string} [teamId] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupIdpGroups: async (channelId: string, groupId: string, token: string, adminconversationsrestrictAccessAddGroupIdpGroupsRequest: AdminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('addGroupIdpGroups', 'channelId', channelId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addGroupIdpGroups', 'groupId', groupId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('addGroupIdpGroups', 'token', token)
            // verify required parameter 'adminconversationsrestrictAccessAddGroupIdpGroupsRequest' is not null or undefined
            assertParamExists('addGroupIdpGroups', 'adminconversationsrestrictAccessAddGroupIdpGroupsRequest', adminconversationsrestrictAccessAddGroupIdpGroupsRequest)
            const localVarPath = `/admin.conversations.restrictAccess.addGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.conversations:write"], configuration)

            if (channelId !== undefined) {
                await addFormParam('channel_id', channelId, false, true)
            }
    
            if (groupId !== undefined) {
                await addFormParam('group_id', groupId, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (token !== undefined) {
                await addFormParam('token', token, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminconversationsrestrictAccessAddGroupIdpGroupsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.conversations.restrictAccess.addGroup',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminconversationsrestrictAccessAddGroupIdpGroupsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all IDP Groups linked to a channel
         * @param {string} token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
         * @param {string} channelId 
         * @param {string} [teamId] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (token: string, channelId: string, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listGroups', 'token', token)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('listGroups', 'channelId', channelId)
            const localVarPath = `/admin.conversations.restrictAccess.listGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.conversations:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.conversations.restrictAccess.listGroups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a linked IDP group linked from a private channel
         * @param {string} channelId The channel to remove the linked group from.
         * @param {string} groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
         * @param {string} teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
         * @param {AdminconversationsrestrictAccessRemoveIdpGroupRequest} adminconversationsrestrictAccessRemoveIdpGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIdpGroup: async (channelId: string, groupId: string, teamId: string, token: string, adminconversationsrestrictAccessRemoveIdpGroupRequest: AdminconversationsrestrictAccessRemoveIdpGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('removeIdpGroup', 'channelId', channelId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeIdpGroup', 'groupId', groupId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeIdpGroup', 'teamId', teamId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('removeIdpGroup', 'token', token)
            // verify required parameter 'adminconversationsrestrictAccessRemoveIdpGroupRequest' is not null or undefined
            assertParamExists('removeIdpGroup', 'adminconversationsrestrictAccessRemoveIdpGroupRequest', adminconversationsrestrictAccessRemoveIdpGroupRequest)
            const localVarPath = `/admin.conversations.restrictAccess.removeGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.conversations:write"], configuration)

            if (channelId !== undefined) {
                await addFormParam('channel_id', channelId, false, true)
            }
    
            if (groupId !== undefined) {
                await addFormParam('group_id', groupId, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (token !== undefined) {
                await addFormParam('token', token, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminconversationsrestrictAccessRemoveIdpGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.conversations.restrictAccess.removeGroup',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminconversationsrestrictAccessRemoveIdpGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminConversationsRestrictAccessApi - functional programming interface
 * @export
 */
export const AdminConversationsRestrictAccessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminConversationsRestrictAccessApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an allowlist of IDP groups for accessing a channel
         * @param {AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGroupIdpGroups(requestParameters: AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse>> {
            const adminconversationsrestrictAccessAddGroupIdpGroupsRequest: AdminconversationsrestrictAccessAddGroupIdpGroupsRequest = {
                channel_id: requestParameters.channel_id,
                group_id: requestParameters.group_id,
                team_id: requestParameters.team_id,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGroupIdpGroups(requestParameters.channelId, requestParameters.groupId, requestParameters.token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all IDP Groups linked to a channel
         * @param {AdminConversationsRestrictAccessApiListGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(requestParameters: AdminConversationsRestrictAccessApiListGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminconversationsrestrictAccessListGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(requestParameters.token, requestParameters.channelId, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a linked IDP group linked from a private channel
         * @param {AdminConversationsRestrictAccessApiRemoveIdpGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeIdpGroup(requestParameters: AdminConversationsRestrictAccessApiRemoveIdpGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminconversationsrestrictAccessRemoveIdpGroupResponse>> {
            const adminconversationsrestrictAccessRemoveIdpGroupRequest: AdminconversationsrestrictAccessRemoveIdpGroupRequest = {
                channel_id: requestParameters.channel_id,
                group_id: requestParameters.group_id,
                team_id: requestParameters.team_id,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeIdpGroup(requestParameters.channelId, requestParameters.groupId, requestParameters.teamId, requestParameters.token, adminconversationsrestrictAccessRemoveIdpGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminConversationsRestrictAccessApi - factory interface
 * @export
 */
export const AdminConversationsRestrictAccessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminConversationsRestrictAccessApiFp(configuration)
    return {
        /**
         * Add an allowlist of IDP groups for accessing a channel
         * @param {AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGroupIdpGroups(requestParameters: AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> {
            return localVarFp.addGroupIdpGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all IDP Groups linked to a channel
         * @param {AdminConversationsRestrictAccessApiListGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(requestParameters: AdminConversationsRestrictAccessApiListGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminconversationsrestrictAccessListGroupsResponse> {
            return localVarFp.listGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a linked IDP group linked from a private channel
         * @param {AdminConversationsRestrictAccessApiRemoveIdpGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIdpGroup(requestParameters: AdminConversationsRestrictAccessApiRemoveIdpGroupRequest, options?: AxiosRequestConfig): AxiosPromise<AdminconversationsrestrictAccessRemoveIdpGroupResponse> {
            return localVarFp.removeIdpGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addGroupIdpGroups operation in AdminConversationsRestrictAccessApi.
 * @export
 * @interface AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest
 */
export type AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest = {
    
    /**
    * The channel to link this group to.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiAddGroupIdpGroups
    */
    readonly channelId: string
    
    /**
    * The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiAddGroupIdpGroups
    */
    readonly groupId: string
    
    /**
    * Authentication token. Requires scope: `admin.conversations:write`
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiAddGroupIdpGroups
    */
    readonly token: string
    
    /**
    * The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiAddGroupIdpGroups
    */
    readonly teamId?: string
    
} & AdminconversationsrestrictAccessAddGroupIdpGroupsRequest

/**
 * Request parameters for listGroups operation in AdminConversationsRestrictAccessApi.
 * @export
 * @interface AdminConversationsRestrictAccessApiListGroupsRequest
 */
export type AdminConversationsRestrictAccessApiListGroupsRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.conversations:read`
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiListGroups
    */
    readonly token: string
    
    /**
    * 
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiListGroups
    */
    readonly channelId: string
    
    /**
    * The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiListGroups
    */
    readonly teamId?: string
    
}

/**
 * Request parameters for removeIdpGroup operation in AdminConversationsRestrictAccessApi.
 * @export
 * @interface AdminConversationsRestrictAccessApiRemoveIdpGroupRequest
 */
export type AdminConversationsRestrictAccessApiRemoveIdpGroupRequest = {
    
    /**
    * The channel to remove the linked group from.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiRemoveIdpGroup
    */
    readonly channelId: string
    
    /**
    * The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiRemoveIdpGroup
    */
    readonly groupId: string
    
    /**
    * The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiRemoveIdpGroup
    */
    readonly teamId: string
    
    /**
    * Authentication token. Requires scope: `admin.conversations:write`
    * @type {string}
    * @memberof AdminConversationsRestrictAccessApiRemoveIdpGroup
    */
    readonly token: string
    
} & AdminconversationsrestrictAccessRemoveIdpGroupRequest

/**
 * AdminConversationsRestrictAccessApiGenerated - object-oriented interface
 * @export
 * @class AdminConversationsRestrictAccessApiGenerated
 * @extends {BaseAPI}
 */
export class AdminConversationsRestrictAccessApiGenerated extends BaseAPI {
    /**
     * Add an allowlist of IDP groups for accessing a channel
     * @param {AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminConversationsRestrictAccessApiGenerated
     */
    public addGroupIdpGroups(requestParameters: AdminConversationsRestrictAccessApiAddGroupIdpGroupsRequest, options?: AxiosRequestConfig) {
        return AdminConversationsRestrictAccessApiFp(this.configuration).addGroupIdpGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all IDP Groups linked to a channel
     * @param {AdminConversationsRestrictAccessApiListGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminConversationsRestrictAccessApiGenerated
     */
    public listGroups(requestParameters: AdminConversationsRestrictAccessApiListGroupsRequest, options?: AxiosRequestConfig) {
        return AdminConversationsRestrictAccessApiFp(this.configuration).listGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a linked IDP group linked from a private channel
     * @param {AdminConversationsRestrictAccessApiRemoveIdpGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminConversationsRestrictAccessApiGenerated
     */
    public removeIdpGroup(requestParameters: AdminConversationsRestrictAccessApiRemoveIdpGroupRequest, options?: AxiosRequestConfig) {
        return AdminConversationsRestrictAccessApiFp(this.configuration).removeIdpGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
