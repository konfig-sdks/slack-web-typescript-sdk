/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppspermissionsusersListUserGrantsResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersListUserGrantsdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersRequestModalResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersRequestModaldefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsPermissionsUsersApi - axios parameter creator
 * @export
 */
export const AppsPermissionsUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns list of user grants and corresponding scopes this app has on a team.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} [cursor] Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request\&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail.
         * @param {number} [limit] The maximum number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGrants: async (token: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listUserGrants', 'token', token)
            const localVarPath = `/apps.permissions.users.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.users.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} scopes A comma separated list of user scopes to request for
         * @param {string} triggerId Token used to trigger the request
         * @param {string} user The user this scope is being requested for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestModal: async (token: string, scopes: string, triggerId: string, user: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('requestModal', 'token', token)
            // verify required parameter 'scopes' is not null or undefined
            assertParamExists('requestModal', 'scopes', scopes)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('requestModal', 'triggerId', triggerId)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('requestModal', 'user', user)
            const localVarPath = `/apps.permissions.users.request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (scopes !== undefined) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (triggerId !== undefined) {
                localVarQueryParameter['trigger_id'] = triggerId;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.users.request',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsPermissionsUsersApi - functional programming interface
 * @export
 */
export const AppsPermissionsUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsPermissionsUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns list of user grants and corresponding scopes this app has on a team.
         * @param {AppsPermissionsUsersApiListUserGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserGrants(requestParameters: AppsPermissionsUsersApiListUserGrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsusersListUserGrantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserGrants(requestParameters.token, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
         * @param {AppsPermissionsUsersApiRequestModalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestModal(requestParameters: AppsPermissionsUsersApiRequestModalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsusersRequestModalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestModal(requestParameters.token, requestParameters.scopes, requestParameters.triggerId, requestParameters.user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsPermissionsUsersApi - factory interface
 * @export
 */
export const AppsPermissionsUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsPermissionsUsersApiFp(configuration)
    return {
        /**
         * Returns list of user grants and corresponding scopes this app has on a team.
         * @param {AppsPermissionsUsersApiListUserGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGrants(requestParameters: AppsPermissionsUsersApiListUserGrantsRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsusersListUserGrantsResponse> {
            return localVarFp.listUserGrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
         * @param {AppsPermissionsUsersApiRequestModalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestModal(requestParameters: AppsPermissionsUsersApiRequestModalRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsusersRequestModalResponse> {
            return localVarFp.requestModal(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listUserGrants operation in AppsPermissionsUsersApi.
 * @export
 * @interface AppsPermissionsUsersApiListUserGrantsRequest
 */
export type AppsPermissionsUsersApiListUserGrantsRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsPermissionsUsersApiListUserGrants
    */
    readonly token: string
    
    /**
    * Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\'s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail.
    * @type {string}
    * @memberof AppsPermissionsUsersApiListUserGrants
    */
    readonly cursor?: string
    
    /**
    * The maximum number of items to return.
    * @type {number}
    * @memberof AppsPermissionsUsersApiListUserGrants
    */
    readonly limit?: number
    
}

/**
 * Request parameters for requestModal operation in AppsPermissionsUsersApi.
 * @export
 * @interface AppsPermissionsUsersApiRequestModalRequest
 */
export type AppsPermissionsUsersApiRequestModalRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsPermissionsUsersApiRequestModal
    */
    readonly token: string
    
    /**
    * A comma separated list of user scopes to request for
    * @type {string}
    * @memberof AppsPermissionsUsersApiRequestModal
    */
    readonly scopes: string
    
    /**
    * Token used to trigger the request
    * @type {string}
    * @memberof AppsPermissionsUsersApiRequestModal
    */
    readonly triggerId: string
    
    /**
    * The user this scope is being requested for
    * @type {string}
    * @memberof AppsPermissionsUsersApiRequestModal
    */
    readonly user: string
    
}

/**
 * AppsPermissionsUsersApiGenerated - object-oriented interface
 * @export
 * @class AppsPermissionsUsersApiGenerated
 * @extends {BaseAPI}
 */
export class AppsPermissionsUsersApiGenerated extends BaseAPI {
    /**
     * Returns list of user grants and corresponding scopes this app has on a team.
     * @param {AppsPermissionsUsersApiListUserGrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsPermissionsUsersApiGenerated
     */
    public listUserGrants(requestParameters: AppsPermissionsUsersApiListUserGrantsRequest, options?: AxiosRequestConfig) {
        return AppsPermissionsUsersApiFp(this.configuration).listUserGrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     * @param {AppsPermissionsUsersApiRequestModalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsPermissionsUsersApiGenerated
     */
    public requestModal(requestParameters: AppsPermissionsUsersApiRequestModalRequest, options?: AxiosRequestConfig) {
        return AppsPermissionsUsersApiFp(this.configuration).requestModal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
