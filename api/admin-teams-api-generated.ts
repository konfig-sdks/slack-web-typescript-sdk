/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminteamsCreateEnterpriseTeamRequest } from '../models';
// @ts-ignore
import { AdminteamsCreateEnterpriseTeamResponse } from '../models';
// @ts-ignore
import { AdminteamsCreateEnterpriseTeamdefaultResponse } from '../models';
// @ts-ignore
import { AdminteamsListAllResponse } from '../models';
// @ts-ignore
import { AdminteamsListAlldefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminTeamsApi - axios parameter creator
 * @export
 */
export const AdminTeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Enterprise team.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {string} teamDomain Team domain (for example, slacksoftballteam).
         * @param {string} teamName Team name (for example, Slack Softball Team).
         * @param {AdminteamsCreateEnterpriseTeamRequest} adminteamsCreateEnterpriseTeamRequest 
         * @param {string} [teamDescription] Description for the team.
         * @param {string} [teamDiscoverability] Who can join the team. A team\\\&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseTeam: async (token: string, teamDomain: string, teamName: string, adminteamsCreateEnterpriseTeamRequest: AdminteamsCreateEnterpriseTeamRequest, teamDescription?: string, teamDiscoverability?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('createEnterpriseTeam', 'token', token)
            // verify required parameter 'teamDomain' is not null or undefined
            assertParamExists('createEnterpriseTeam', 'teamDomain', teamDomain)
            // verify required parameter 'teamName' is not null or undefined
            assertParamExists('createEnterpriseTeam', 'teamName', teamName)
            // verify required parameter 'adminteamsCreateEnterpriseTeamRequest' is not null or undefined
            assertParamExists('createEnterpriseTeam', 'adminteamsCreateEnterpriseTeamRequest', adminteamsCreateEnterpriseTeamRequest)
            const localVarPath = `/admin.teams.create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (teamDescription !== undefined) {
                await addFormParam('team_description', teamDescription, false, true)
            }
    
            if (teamDiscoverability !== undefined) {
                await addFormParam('team_discoverability', teamDiscoverability, false, true)
            }
    
            if (teamDomain !== undefined) {
                await addFormParam('team_domain', teamDomain, false, true)
            }
    
            if (teamName !== undefined) {
                await addFormParam('team_name', teamName, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminteamsCreateEnterpriseTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.create',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminteamsCreateEnterpriseTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all teams on an Enterprise organization
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
         * @param {number} [limit] The maximum number of items to return. Must be between 1 - 100 both inclusive.
         * @param {string} [cursor] Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (token: string, limit?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listAll', 'token', token)
            const localVarPath = `/admin.teams.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:read"], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminTeamsApi - functional programming interface
 * @export
 */
export const AdminTeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminTeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an Enterprise team.
         * @param {AdminTeamsApiCreateEnterpriseTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnterpriseTeam(requestParameters: AdminTeamsApiCreateEnterpriseTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamsCreateEnterpriseTeamResponse>> {
            const adminteamsCreateEnterpriseTeamRequest: AdminteamsCreateEnterpriseTeamRequest = {
                team_description: requestParameters.team_description,
                team_discoverability: requestParameters.team_discoverability,
                team_domain: requestParameters.team_domain,
                team_name: requestParameters.team_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnterpriseTeam(requestParameters.token, requestParameters.teamDomain, requestParameters.teamName, adminteamsCreateEnterpriseTeamRequest, requestParameters.teamDescription, requestParameters.teamDiscoverability, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all teams on an Enterprise organization
         * @param {AdminTeamsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: AdminTeamsApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamsListAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.token, requestParameters.limit, requestParameters.cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminTeamsApi - factory interface
 * @export
 */
export const AdminTeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminTeamsApiFp(configuration)
    return {
        /**
         * Create an Enterprise team.
         * @param {AdminTeamsApiCreateEnterpriseTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseTeam(requestParameters: AdminTeamsApiCreateEnterpriseTeamRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamsCreateEnterpriseTeamResponse> {
            return localVarFp.createEnterpriseTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all teams on an Enterprise organization
         * @param {AdminTeamsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: AdminTeamsApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamsListAllResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEnterpriseTeam operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiCreateEnterpriseTeamRequest
 */
export type AdminTeamsApiCreateEnterpriseTeamRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminTeamsApiCreateEnterpriseTeam
    */
    readonly token: string
    
    /**
    * Team domain (for example, slacksoftballteam).
    * @type {string}
    * @memberof AdminTeamsApiCreateEnterpriseTeam
    */
    readonly teamDomain: string
    
    /**
    * Team name (for example, Slack Softball Team).
    * @type {string}
    * @memberof AdminTeamsApiCreateEnterpriseTeam
    */
    readonly teamName: string
    
    /**
    * Description for the team.
    * @type {string}
    * @memberof AdminTeamsApiCreateEnterpriseTeam
    */
    readonly teamDescription?: string
    
    /**
    * Who can join the team. A team\\\'s discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.
    * @type {string}
    * @memberof AdminTeamsApiCreateEnterpriseTeam
    */
    readonly teamDiscoverability?: string
    
} & AdminteamsCreateEnterpriseTeamRequest

/**
 * Request parameters for listAll operation in AdminTeamsApi.
 * @export
 * @interface AdminTeamsApiListAllRequest
 */
export type AdminTeamsApiListAllRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:read`
    * @type {string}
    * @memberof AdminTeamsApiListAll
    */
    readonly token: string
    
    /**
    * The maximum number of items to return. Must be between 1 - 100 both inclusive.
    * @type {number}
    * @memberof AdminTeamsApiListAll
    */
    readonly limit?: number
    
    /**
    * Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    * @type {string}
    * @memberof AdminTeamsApiListAll
    */
    readonly cursor?: string
    
}

/**
 * AdminTeamsApiGenerated - object-oriented interface
 * @export
 * @class AdminTeamsApiGenerated
 * @extends {BaseAPI}
 */
export class AdminTeamsApiGenerated extends BaseAPI {
    /**
     * Create an Enterprise team.
     * @param {AdminTeamsApiCreateEnterpriseTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApiGenerated
     */
    public createEnterpriseTeam(requestParameters: AdminTeamsApiCreateEnterpriseTeamRequest, options?: AxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).createEnterpriseTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all teams on an Enterprise organization
     * @param {AdminTeamsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApiGenerated
     */
    public listAll(requestParameters: AdminTeamsApiListAllRequest, options?: AxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
