/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminappsApproveAppInstallationRequest } from '../models';
// @ts-ignore
import { AdminappsApproveAppInstallationResponse } from '../models';
// @ts-ignore
import { AdminappsApproveAppInstallationdefaultResponse } from '../models';
// @ts-ignore
import { AdminappsRestrictAppRequest } from '../models';
// @ts-ignore
import { AdminappsRestrictAppResponse } from '../models';
// @ts-ignore
import { AdminappsRestrictAppdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminAppsApi - axios parameter creator
 * @export
 */
export const AdminAppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approve an app for installation on a workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
         * @param {string} [appId] The id of the app to approve.
         * @param {string} [requestId] The id of the request to approve.
         * @param {string} [teamId] 
         * @param {AdminappsApproveAppInstallationRequest} [adminappsApproveAppInstallationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAppInstallation: async (token: string, appId?: string, requestId?: string, teamId?: string, adminappsApproveAppInstallationRequest?: AdminappsApproveAppInstallationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('approveAppInstallation', 'token', token)
            const localVarPath = `/admin.apps.approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.apps:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (appId !== undefined) {
                await addFormParam('app_id', appId, false, true)
            }
    
            if (requestId !== undefined) {
                await addFormParam('request_id', requestId, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminappsApproveAppInstallationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.apps.approve',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminappsApproveAppInstallationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restrict an app for installation on a workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
         * @param {string} [appId] The id of the app to restrict.
         * @param {string} [requestId] The id of the request to restrict.
         * @param {string} [teamId] 
         * @param {AdminappsRestrictAppRequest} [adminappsRestrictAppRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restrictApp: async (token: string, appId?: string, requestId?: string, teamId?: string, adminappsRestrictAppRequest?: AdminappsRestrictAppRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('restrictApp', 'token', token)
            const localVarPath = `/admin.apps.restrict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.apps:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (appId !== undefined) {
                await addFormParam('app_id', appId, false, true)
            }
    
            if (requestId !== undefined) {
                await addFormParam('request_id', requestId, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminappsRestrictAppRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.apps.restrict',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminappsRestrictAppRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminAppsApi - functional programming interface
 * @export
 */
export const AdminAppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminAppsApiAxiosParamCreator(configuration)
    return {
        /**
         * Approve an app for installation on a workspace.
         * @param {AdminAppsApiApproveAppInstallationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveAppInstallation(requestParameters: AdminAppsApiApproveAppInstallationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminappsApproveAppInstallationResponse>> {
            const adminappsApproveAppInstallationRequest: AdminappsApproveAppInstallationRequest = {
                app_id: requestParameters.app_id,
                request_id: requestParameters.request_id,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveAppInstallation(requestParameters.token, requestParameters.appId, requestParameters.requestId, requestParameters.teamId, adminappsApproveAppInstallationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Restrict an app for installation on a workspace.
         * @param {AdminAppsApiRestrictAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restrictApp(requestParameters: AdminAppsApiRestrictAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminappsRestrictAppResponse>> {
            const adminappsRestrictAppRequest: AdminappsRestrictAppRequest = {
                app_id: requestParameters.app_id,
                request_id: requestParameters.request_id,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.restrictApp(requestParameters.token, requestParameters.appId, requestParameters.requestId, requestParameters.teamId, adminappsRestrictAppRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminAppsApi - factory interface
 * @export
 */
export const AdminAppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminAppsApiFp(configuration)
    return {
        /**
         * Approve an app for installation on a workspace.
         * @param {AdminAppsApiApproveAppInstallationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAppInstallation(requestParameters: AdminAppsApiApproveAppInstallationRequest, options?: AxiosRequestConfig): AxiosPromise<AdminappsApproveAppInstallationResponse> {
            return localVarFp.approveAppInstallation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Restrict an app for installation on a workspace.
         * @param {AdminAppsApiRestrictAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restrictApp(requestParameters: AdminAppsApiRestrictAppRequest, options?: AxiosRequestConfig): AxiosPromise<AdminappsRestrictAppResponse> {
            return localVarFp.restrictApp(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveAppInstallation operation in AdminAppsApi.
 * @export
 * @interface AdminAppsApiApproveAppInstallationRequest
 */
export type AdminAppsApiApproveAppInstallationRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.apps:write`
    * @type {string}
    * @memberof AdminAppsApiApproveAppInstallation
    */
    readonly token: string
    
    /**
    * The id of the app to approve.
    * @type {string}
    * @memberof AdminAppsApiApproveAppInstallation
    */
    readonly appId?: string
    
    /**
    * The id of the request to approve.
    * @type {string}
    * @memberof AdminAppsApiApproveAppInstallation
    */
    readonly requestId?: string
    
    /**
    * 
    * @type {string}
    * @memberof AdminAppsApiApproveAppInstallation
    */
    readonly teamId?: string
    
} & AdminappsApproveAppInstallationRequest

/**
 * Request parameters for restrictApp operation in AdminAppsApi.
 * @export
 * @interface AdminAppsApiRestrictAppRequest
 */
export type AdminAppsApiRestrictAppRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.apps:write`
    * @type {string}
    * @memberof AdminAppsApiRestrictApp
    */
    readonly token: string
    
    /**
    * The id of the app to restrict.
    * @type {string}
    * @memberof AdminAppsApiRestrictApp
    */
    readonly appId?: string
    
    /**
    * The id of the request to restrict.
    * @type {string}
    * @memberof AdminAppsApiRestrictApp
    */
    readonly requestId?: string
    
    /**
    * 
    * @type {string}
    * @memberof AdminAppsApiRestrictApp
    */
    readonly teamId?: string
    
} & AdminappsRestrictAppRequest

/**
 * AdminAppsApiGenerated - object-oriented interface
 * @export
 * @class AdminAppsApiGenerated
 * @extends {BaseAPI}
 */
export class AdminAppsApiGenerated extends BaseAPI {
    /**
     * Approve an app for installation on a workspace.
     * @param {AdminAppsApiApproveAppInstallationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAppsApiGenerated
     */
    public approveAppInstallation(requestParameters: AdminAppsApiApproveAppInstallationRequest, options?: AxiosRequestConfig) {
        return AdminAppsApiFp(this.configuration).approveAppInstallation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restrict an app for installation on a workspace.
     * @param {AdminAppsApiRestrictAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAppsApiGenerated
     */
    public restrictApp(requestParameters: AdminAppsApiRestrictAppRequest, options?: AxiosRequestConfig) {
        return AdminAppsApiFp(this.configuration).restrictApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
