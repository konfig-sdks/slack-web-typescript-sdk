/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UsersprofileGetProfileInfoResponse } from '../models';
// @ts-ignore
import { UsersprofileGetProfileInfodefaultResponse } from '../models';
// @ts-ignore
import { UsersprofileSetProfileInfoRequest } from '../models';
// @ts-ignore
import { UsersprofileSetProfileInfoResponse } from '../models';
// @ts-ignore
import { UsersprofileSetProfileInfodefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersProfileApi - axios parameter creator
 * @export
 */
export const UsersProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a user\'s profile information.
         * @param {string} token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
         * @param {boolean} [includeLabels] Include labels for each ID in custom profile fields
         * @param {string} [user] User to retrieve profile info for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileInfo: async (token: string, includeLabels?: boolean, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getProfileInfo', 'token', token)
            const localVarPath = `/users.profile.get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["users.profile:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (includeLabels !== undefined) {
                localVarQueryParameter['include_labels'] = includeLabels;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users.profile.get',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the profile information for a user.
         * @param {string} token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
         * @param {string} [name] Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed.
         * @param {string} [profile] Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
         * @param {string} [user] ID of user to change. This argument may only be specified by team admins on paid teams.
         * @param {string} [value] Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed.
         * @param {UsersprofileSetProfileInfoRequest} [usersprofileSetProfileInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProfileInfo: async (token: string, name?: string, profile?: string, user?: string, value?: string, usersprofileSetProfileInfoRequest?: UsersprofileSetProfileInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setProfileInfo', 'token', token)
            const localVarPath = `/users.profile.set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["users.profile:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (profile !== undefined) {
                await addFormParam('profile', profile, false, true)
            }
    
            if (user !== undefined) {
                await addFormParam('user', user, false, true)
            }
    
            if (value !== undefined) {
                await addFormParam('value', value, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersprofileSetProfileInfoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users.profile.set',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersprofileSetProfileInfoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersProfileApi - functional programming interface
 * @export
 */
export const UsersProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a user\'s profile information.
         * @param {UsersProfileApiGetProfileInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileInfo(requestParameters: UsersProfileApiGetProfileInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersprofileGetProfileInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileInfo(requestParameters.token, requestParameters.includeLabels, requestParameters.user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the profile information for a user.
         * @param {UsersProfileApiSetProfileInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProfileInfo(requestParameters: UsersProfileApiSetProfileInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersprofileSetProfileInfoResponse>> {
            const usersprofileSetProfileInfoRequest: UsersprofileSetProfileInfoRequest = {
                name: requestParameters.name,
                profile: requestParameters.profile,
                user: requestParameters.user,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setProfileInfo(requestParameters.token, requestParameters.name, requestParameters.profile, requestParameters.user, requestParameters.value, usersprofileSetProfileInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersProfileApi - factory interface
 * @export
 */
export const UsersProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersProfileApiFp(configuration)
    return {
        /**
         * Retrieves a user\'s profile information.
         * @param {UsersProfileApiGetProfileInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileInfo(requestParameters: UsersProfileApiGetProfileInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UsersprofileGetProfileInfoResponse> {
            return localVarFp.getProfileInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the profile information for a user.
         * @param {UsersProfileApiSetProfileInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProfileInfo(requestParameters: UsersProfileApiSetProfileInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UsersprofileSetProfileInfoResponse> {
            return localVarFp.setProfileInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getProfileInfo operation in UsersProfileApi.
 * @export
 * @interface UsersProfileApiGetProfileInfoRequest
 */
export type UsersProfileApiGetProfileInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `users.profile:read`
    * @type {string}
    * @memberof UsersProfileApiGetProfileInfo
    */
    readonly token: string
    
    /**
    * Include labels for each ID in custom profile fields
    * @type {boolean}
    * @memberof UsersProfileApiGetProfileInfo
    */
    readonly includeLabels?: boolean
    
    /**
    * User to retrieve profile info for
    * @type {string}
    * @memberof UsersProfileApiGetProfileInfo
    */
    readonly user?: string
    
}

/**
 * Request parameters for setProfileInfo operation in UsersProfileApi.
 * @export
 * @interface UsersProfileApiSetProfileInfoRequest
 */
export type UsersProfileApiSetProfileInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `users.profile:write`
    * @type {string}
    * @memberof UsersProfileApiSetProfileInfo
    */
    readonly token: string
    
    /**
    * Name of a single key to set. Usable only if `profile` is not passed.
    * @type {string}
    * @memberof UsersProfileApiSetProfileInfo
    */
    readonly name?: string
    
    /**
    * Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
    * @type {string}
    * @memberof UsersProfileApiSetProfileInfo
    */
    readonly profile?: string
    
    /**
    * ID of user to change. This argument may only be specified by team admins on paid teams.
    * @type {string}
    * @memberof UsersProfileApiSetProfileInfo
    */
    readonly user?: string
    
    /**
    * Value to set a single key to. Usable only if `profile` is not passed.
    * @type {string}
    * @memberof UsersProfileApiSetProfileInfo
    */
    readonly value?: string
    
} & UsersprofileSetProfileInfoRequest

/**
 * UsersProfileApiGenerated - object-oriented interface
 * @export
 * @class UsersProfileApiGenerated
 * @extends {BaseAPI}
 */
export class UsersProfileApiGenerated extends BaseAPI {
    /**
     * Retrieves a user\'s profile information.
     * @param {UsersProfileApiGetProfileInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersProfileApiGenerated
     */
    public getProfileInfo(requestParameters: UsersProfileApiGetProfileInfoRequest, options?: AxiosRequestConfig) {
        return UsersProfileApiFp(this.configuration).getProfileInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the profile information for a user.
     * @param {UsersProfileApiSetProfileInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersProfileApiGenerated
     */
    public setProfileInfo(requestParameters: UsersProfileApiSetProfileInfoRequest, options?: AxiosRequestConfig) {
        return UsersProfileApiFp(this.configuration).setProfileInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
