/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppsUninstallResponse } from '../models';
// @ts-ignore
import { AppsUninstalldefaultResponse } from '../models';
// @ts-ignore
import { AppseventauthorizationsGetListResponse } from '../models';
// @ts-ignore
import { AppseventauthorizationsGetListdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsAdditionalScopesRequestResponse } from '../models';
// @ts-ignore
import { AppspermissionsAdditionalScopesRequestdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsListPermissionsResponse } from '../models';
// @ts-ignore
import { AppspermissionsListPermissionsdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsresourcesGetResourcesListResponse } from '../models';
// @ts-ignore
import { AppspermissionsresourcesGetResourcesListdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsscopesGetListResponse } from '../models';
// @ts-ignore
import { AppspermissionsscopesGetListdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersListUserGrantsResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersListUserGrantsdefaultResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersRequestModalResponse } from '../models';
// @ts-ignore
import { AppspermissionsusersRequestModaldefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows an app to request additional scopes
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} scopes A comma separated list of scopes to request for
         * @param {string} triggerId Token used to trigger the permissions API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalScopesRequest: async (token: string, scopes: string, triggerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('additionalScopesRequest', 'token', token)
            // verify required parameter 'scopes' is not null or undefined
            assertParamExists('additionalScopesRequest', 'scopes', scopes)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('additionalScopesRequest', 'triggerId', triggerId)
            const localVarPath = `/apps.permissions.request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (scopes !== undefined) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (triggerId !== undefined) {
                localVarQueryParameter['trigger_id'] = triggerId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.request',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
         * @param {string} token Authentication token. Requires scope: &#x60;authorizations:read&#x60;
         * @param {string} eventContext 
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (token: string, eventContext: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getList', 'token', token)
            // verify required parameter 'eventContext' is not null or undefined
            assertParamExists('getList', 'eventContext', eventContext)
            const localVarPath = `/apps.event.authorizations.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["authorizations:read"], configuration)
            if (eventContext !== undefined) {
                localVarQueryParameter['event_context'] = eventContext;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.event.authorizations.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of scopes this app has on a team.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList_1: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getList_1', 'token', token)
            const localVarPath = `/apps.permissions.scopes.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.scopes.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of resource grants this app has on a team.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} [cursor] Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request\&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail.
         * @param {number} [limit] The maximum number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesList: async (token: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getResourcesList', 'token', token)
            const localVarPath = `/apps.permissions.resources.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.resources.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of permissions this app has on a team.
         * @param {string} [token] Authentication token. Requires scope: &#x60;none&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apps.permissions.info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns list of user grants and corresponding scopes this app has on a team.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} [cursor] Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request\&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail.
         * @param {number} [limit] The maximum number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGrants: async (token: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listUserGrants', 'token', token)
            const localVarPath = `/apps.permissions.users.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.users.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} scopes A comma separated list of user scopes to request for
         * @param {string} triggerId Token used to trigger the request
         * @param {string} user The user this scope is being requested for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestModal: async (token: string, scopes: string, triggerId: string, user: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('requestModal', 'token', token)
            // verify required parameter 'scopes' is not null or undefined
            assertParamExists('requestModal', 'scopes', scopes)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('requestModal', 'triggerId', triggerId)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('requestModal', 'user', user)
            const localVarPath = `/apps.permissions.users.request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (scopes !== undefined) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (triggerId !== undefined) {
                localVarQueryParameter['trigger_id'] = triggerId;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.users.request',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uninstalls your app from a workspace.
         * @param {string} [token] Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} [clientId] Issued when you created your application.
         * @param {string} [clientSecret] Issued when you created your application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstall: async (token?: string, clientId?: string, clientSecret?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apps.uninstall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (clientSecret !== undefined) {
                localVarQueryParameter['client_secret'] = clientSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.uninstall',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows an app to request additional scopes
         * @param {AppsApiAdditionalScopesRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async additionalScopesRequest(requestParameters: AppsApiAdditionalScopesRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsAdditionalScopesRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.additionalScopesRequest(requestParameters.token, requestParameters.scopes, requestParameters.triggerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
         * @param {AppsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: AppsApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppseventauthorizationsGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.token, requestParameters.eventContext, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns list of scopes this app has on a team.
         * @param {AppsApiGetList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList_1(requestParameters: AppsApiGetList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsscopesGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList_1(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns list of resource grants this app has on a team.
         * @param {AppsApiGetResourcesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourcesList(requestParameters: AppsApiGetResourcesListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsresourcesGetResourcesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourcesList(requestParameters.token, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns list of permissions this app has on a team.
         * @param {AppsApiListPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPermissions(requestParameters: AppsApiListPermissionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsListPermissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPermissions(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns list of user grants and corresponding scopes this app has on a team.
         * @param {AppsApiListUserGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserGrants(requestParameters: AppsApiListUserGrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsusersListUserGrantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserGrants(requestParameters.token, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
         * @param {AppsApiRequestModalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestModal(requestParameters: AppsApiRequestModalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsusersRequestModalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestModal(requestParameters.token, requestParameters.scopes, requestParameters.triggerId, requestParameters.user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uninstalls your app from a workspace.
         * @param {AppsApiUninstallRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uninstall(requestParameters: AppsApiUninstallRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsUninstallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uninstall(requestParameters.token, requestParameters.clientId, requestParameters.clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsApiFp(configuration)
    return {
        /**
         * Allows an app to request additional scopes
         * @param {AppsApiAdditionalScopesRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalScopesRequest(requestParameters: AppsApiAdditionalScopesRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsAdditionalScopesRequestResponse> {
            return localVarFp.additionalScopesRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
         * @param {AppsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppsApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<AppseventauthorizationsGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of scopes this app has on a team.
         * @param {AppsApiGetList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList_1(requestParameters: AppsApiGetList0Request, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsscopesGetListResponse> {
            return localVarFp.getList_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of resource grants this app has on a team.
         * @param {AppsApiGetResourcesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesList(requestParameters: AppsApiGetResourcesListRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsresourcesGetResourcesListResponse> {
            return localVarFp.getResourcesList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of permissions this app has on a team.
         * @param {AppsApiListPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions(requestParameters: AppsApiListPermissionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsListPermissionsResponse> {
            return localVarFp.listPermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of user grants and corresponding scopes this app has on a team.
         * @param {AppsApiListUserGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserGrants(requestParameters: AppsApiListUserGrantsRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsusersListUserGrantsResponse> {
            return localVarFp.listUserGrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
         * @param {AppsApiRequestModalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestModal(requestParameters: AppsApiRequestModalRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsusersRequestModalResponse> {
            return localVarFp.requestModal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Uninstalls your app from a workspace.
         * @param {AppsApiUninstallRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstall(requestParameters: AppsApiUninstallRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppsUninstallResponse> {
            return localVarFp.uninstall(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for additionalScopesRequest operation in AppsApi.
 * @export
 * @interface AppsApiAdditionalScopesRequestRequest
 */
export type AppsApiAdditionalScopesRequestRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiAdditionalScopesRequest
    */
    readonly token: string
    
    /**
    * A comma separated list of scopes to request for
    * @type {string}
    * @memberof AppsApiAdditionalScopesRequest
    */
    readonly scopes: string
    
    /**
    * Token used to trigger the permissions API
    * @type {string}
    * @memberof AppsApiAdditionalScopesRequest
    */
    readonly triggerId: string
    
}

/**
 * Request parameters for getList operation in AppsApi.
 * @export
 * @interface AppsApiGetListRequest
 */
export type AppsApiGetListRequest = {
    
    /**
    * Authentication token. Requires scope: `authorizations:read`
    * @type {string}
    * @memberof AppsApiGetList
    */
    readonly token: string
    
    /**
    * 
    * @type {string}
    * @memberof AppsApiGetList
    */
    readonly eventContext: string
    
    /**
    * 
    * @type {string}
    * @memberof AppsApiGetList
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof AppsApiGetList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getList_1 operation in AppsApi.
 * @export
 * @interface AppsApiGetList0Request
 */
export type AppsApiGetList0Request = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiGetList0
    */
    readonly token: string
    
}

/**
 * Request parameters for getResourcesList operation in AppsApi.
 * @export
 * @interface AppsApiGetResourcesListRequest
 */
export type AppsApiGetResourcesListRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiGetResourcesList
    */
    readonly token: string
    
    /**
    * Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\'s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail.
    * @type {string}
    * @memberof AppsApiGetResourcesList
    */
    readonly cursor?: string
    
    /**
    * The maximum number of items to return.
    * @type {number}
    * @memberof AppsApiGetResourcesList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listPermissions operation in AppsApi.
 * @export
 * @interface AppsApiListPermissionsRequest
 */
export type AppsApiListPermissionsRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiListPermissions
    */
    readonly token?: string
    
}

/**
 * Request parameters for listUserGrants operation in AppsApi.
 * @export
 * @interface AppsApiListUserGrantsRequest
 */
export type AppsApiListUserGrantsRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiListUserGrants
    */
    readonly token: string
    
    /**
    * Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\'s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail.
    * @type {string}
    * @memberof AppsApiListUserGrants
    */
    readonly cursor?: string
    
    /**
    * The maximum number of items to return.
    * @type {number}
    * @memberof AppsApiListUserGrants
    */
    readonly limit?: number
    
}

/**
 * Request parameters for requestModal operation in AppsApi.
 * @export
 * @interface AppsApiRequestModalRequest
 */
export type AppsApiRequestModalRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiRequestModal
    */
    readonly token: string
    
    /**
    * A comma separated list of user scopes to request for
    * @type {string}
    * @memberof AppsApiRequestModal
    */
    readonly scopes: string
    
    /**
    * Token used to trigger the request
    * @type {string}
    * @memberof AppsApiRequestModal
    */
    readonly triggerId: string
    
    /**
    * The user this scope is being requested for
    * @type {string}
    * @memberof AppsApiRequestModal
    */
    readonly user: string
    
}

/**
 * Request parameters for uninstall operation in AppsApi.
 * @export
 * @interface AppsApiUninstallRequest
 */
export type AppsApiUninstallRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsApiUninstall
    */
    readonly token?: string
    
    /**
    * Issued when you created your application.
    * @type {string}
    * @memberof AppsApiUninstall
    */
    readonly clientId?: string
    
    /**
    * Issued when you created your application.
    * @type {string}
    * @memberof AppsApiUninstall
    */
    readonly clientSecret?: string
    
}

/**
 * AppsApiGenerated - object-oriented interface
 * @export
 * @class AppsApiGenerated
 * @extends {BaseAPI}
 */
export class AppsApiGenerated extends BaseAPI {
    /**
     * Allows an app to request additional scopes
     * @param {AppsApiAdditionalScopesRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public additionalScopesRequest(requestParameters: AppsApiAdditionalScopesRequestRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).additionalScopesRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
     * @param {AppsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getList(requestParameters: AppsApiGetListRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of scopes this app has on a team.
     * @param {AppsApiGetList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getList_1(requestParameters: AppsApiGetList0Request, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getList_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of resource grants this app has on a team.
     * @param {AppsApiGetResourcesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getResourcesList(requestParameters: AppsApiGetResourcesListRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getResourcesList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of permissions this app has on a team.
     * @param {AppsApiListPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listPermissions(requestParameters: AppsApiListPermissionsRequest = {}, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listPermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns list of user grants and corresponding scopes this app has on a team.
     * @param {AppsApiListUserGrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listUserGrants(requestParameters: AppsApiListUserGrantsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listUserGrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     * @param {AppsApiRequestModalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public requestModal(requestParameters: AppsApiRequestModalRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).requestModal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uninstalls your app from a workspace.
     * @param {AppsApiUninstallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public uninstall(requestParameters: AppsApiUninstallRequest = {}, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).uninstall(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
