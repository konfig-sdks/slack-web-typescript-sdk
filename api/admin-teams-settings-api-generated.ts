/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminteamssettingsGetInfoResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsGetInfodefaultResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDefaultChannelsRequest } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDefaultChannelsResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDefaultChannelsdefaultResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDescriptionRequest } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDescriptionResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDescriptiondefaultResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetDiscoverabilityOfWorkspacedefaultResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetIconRequest } from '../models';
// @ts-ignore
import { AdminteamssettingsSetIconResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetIcondefaultResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetNameRequest } from '../models';
// @ts-ignore
import { AdminteamssettingsSetNameResponse } from '../models';
// @ts-ignore
import { AdminteamssettingsSetNamedefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminTeamsSettingsApi - axios parameter creator
 * @export
 */
export const AdminTeamsSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch information about settings in a workspace
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (token: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getInfo', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getInfo', 'teamId', teamId)
            const localVarPath = `/admin.teams.settings.info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:read"], configuration)
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.settings.info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the default channels of a workspace.
         * @param {string} channelIds An array of channel IDs.
         * @param {string} teamId ID for the workspace to set the default channel for.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {AdminteamssettingsSetDefaultChannelsRequest} adminteamssettingsSetDefaultChannelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultChannels: async (channelIds: string, teamId: string, token: string, adminteamssettingsSetDefaultChannelsRequest: AdminteamssettingsSetDefaultChannelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelIds' is not null or undefined
            assertParamExists('setDefaultChannels', 'channelIds', channelIds)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setDefaultChannels', 'teamId', teamId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setDefaultChannels', 'token', token)
            // verify required parameter 'adminteamssettingsSetDefaultChannelsRequest' is not null or undefined
            assertParamExists('setDefaultChannels', 'adminteamssettingsSetDefaultChannelsRequest', adminteamssettingsSetDefaultChannelsRequest)
            const localVarPath = `/admin.teams.settings.setDefaultChannels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)

            if (channelIds !== undefined) {
                await addFormParam('channel_ids', channelIds, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (token !== undefined) {
                await addFormParam('token', token, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminteamssettingsSetDefaultChannelsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.settings.setDefaultChannels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminteamssettingsSetDefaultChannelsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the description of a given workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {string} description The new description for the workspace.
         * @param {string} teamId ID for the workspace to set the description for.
         * @param {AdminteamssettingsSetDescriptionRequest} adminteamssettingsSetDescriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDescription: async (token: string, description: string, teamId: string, adminteamssettingsSetDescriptionRequest: AdminteamssettingsSetDescriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setDescription', 'token', token)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('setDescription', 'description', description)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setDescription', 'teamId', teamId)
            // verify required parameter 'adminteamssettingsSetDescriptionRequest' is not null or undefined
            assertParamExists('setDescription', 'adminteamssettingsSetDescriptionRequest', adminteamssettingsSetDescriptionRequest)
            const localVarPath = `/admin.teams.settings.setDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminteamssettingsSetDescriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.settings.setDescription',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminteamssettingsSetDescriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An API method that allows admins to set the discoverability of a given workspace
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {string} discoverability This workspace\\\&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;.
         * @param {string} teamId The ID of the workspace to set discoverability on.
         * @param {AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest} adminteamssettingsSetDiscoverabilityOfWorkspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDiscoverabilityOfWorkspace: async (token: string, discoverability: string, teamId: string, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest: AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setDiscoverabilityOfWorkspace', 'token', token)
            // verify required parameter 'discoverability' is not null or undefined
            assertParamExists('setDiscoverabilityOfWorkspace', 'discoverability', discoverability)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setDiscoverabilityOfWorkspace', 'teamId', teamId)
            // verify required parameter 'adminteamssettingsSetDiscoverabilityOfWorkspaceRequest' is not null or undefined
            assertParamExists('setDiscoverabilityOfWorkspace', 'adminteamssettingsSetDiscoverabilityOfWorkspaceRequest', adminteamssettingsSetDiscoverabilityOfWorkspaceRequest)
            const localVarPath = `/admin.teams.settings.setDiscoverability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (discoverability !== undefined) {
                await addFormParam('discoverability', discoverability, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminteamssettingsSetDiscoverabilityOfWorkspaceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.settings.setDiscoverability',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets the icon of a workspace.
         * @param {string} imageUrl Image URL for the icon
         * @param {string} teamId ID for the workspace to set the icon for.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {AdminteamssettingsSetIconRequest} adminteamssettingsSetIconRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIcon: async (imageUrl: string, teamId: string, token: string, adminteamssettingsSetIconRequest: AdminteamssettingsSetIconRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageUrl' is not null or undefined
            assertParamExists('setIcon', 'imageUrl', imageUrl)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setIcon', 'teamId', teamId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setIcon', 'token', token)
            // verify required parameter 'adminteamssettingsSetIconRequest' is not null or undefined
            assertParamExists('setIcon', 'adminteamssettingsSetIconRequest', adminteamssettingsSetIconRequest)
            const localVarPath = `/admin.teams.settings.setIcon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)

            if (imageUrl !== undefined) {
                await addFormParam('image_url', imageUrl, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (token !== undefined) {
                await addFormParam('token', token, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminteamssettingsSetIconRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.settings.setIcon',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminteamssettingsSetIconRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the name of a given workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {string} name The new name of the workspace.
         * @param {string} teamId ID for the workspace to set the name for.
         * @param {AdminteamssettingsSetNameRequest} adminteamssettingsSetNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setName: async (token: string, name: string, teamId: string, adminteamssettingsSetNameRequest: AdminteamssettingsSetNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setName', 'token', token)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('setName', 'name', name)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setName', 'teamId', teamId)
            // verify required parameter 'adminteamssettingsSetNameRequest' is not null or undefined
            assertParamExists('setName', 'adminteamssettingsSetNameRequest', adminteamssettingsSetNameRequest)
            const localVarPath = `/admin.teams.settings.setName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminteamssettingsSetNameRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.teams.settings.setName',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminteamssettingsSetNameRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminTeamsSettingsApi - functional programming interface
 * @export
 */
export const AdminTeamsSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminTeamsSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch information about settings in a workspace
         * @param {AdminTeamsSettingsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: AdminTeamsSettingsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamssettingsGetInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.token, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the default channels of a workspace.
         * @param {AdminTeamsSettingsApiSetDefaultChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultChannels(requestParameters: AdminTeamsSettingsApiSetDefaultChannelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamssettingsSetDefaultChannelsResponse>> {
            const adminteamssettingsSetDefaultChannelsRequest: AdminteamssettingsSetDefaultChannelsRequest = {
                channel_ids: requestParameters.channel_ids,
                team_id: requestParameters.team_id,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultChannels(requestParameters.channelIds, requestParameters.teamId, requestParameters.token, adminteamssettingsSetDefaultChannelsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the description of a given workspace.
         * @param {AdminTeamsSettingsApiSetDescriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDescription(requestParameters: AdminTeamsSettingsApiSetDescriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamssettingsSetDescriptionResponse>> {
            const adminteamssettingsSetDescriptionRequest: AdminteamssettingsSetDescriptionRequest = {
                description: requestParameters.description,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDescription(requestParameters.token, requestParameters.description, requestParameters.teamId, adminteamssettingsSetDescriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An API method that allows admins to set the discoverability of a given workspace
         * @param {AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDiscoverabilityOfWorkspace(requestParameters: AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse>> {
            const adminteamssettingsSetDiscoverabilityOfWorkspaceRequest: AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest = {
                discoverability: requestParameters.discoverability,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDiscoverabilityOfWorkspace(requestParameters.token, requestParameters.discoverability, requestParameters.teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sets the icon of a workspace.
         * @param {AdminTeamsSettingsApiSetIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setIcon(requestParameters: AdminTeamsSettingsApiSetIconRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamssettingsSetIconResponse>> {
            const adminteamssettingsSetIconRequest: AdminteamssettingsSetIconRequest = {
                image_url: requestParameters.image_url,
                team_id: requestParameters.team_id,
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setIcon(requestParameters.imageUrl, requestParameters.teamId, requestParameters.token, adminteamssettingsSetIconRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the name of a given workspace.
         * @param {AdminTeamsSettingsApiSetNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setName(requestParameters: AdminTeamsSettingsApiSetNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminteamssettingsSetNameResponse>> {
            const adminteamssettingsSetNameRequest: AdminteamssettingsSetNameRequest = {
                name: requestParameters.name,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setName(requestParameters.token, requestParameters.name, requestParameters.teamId, adminteamssettingsSetNameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminTeamsSettingsApi - factory interface
 * @export
 */
export const AdminTeamsSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminTeamsSettingsApiFp(configuration)
    return {
        /**
         * Fetch information about settings in a workspace
         * @param {AdminTeamsSettingsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: AdminTeamsSettingsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamssettingsGetInfoResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the default channels of a workspace.
         * @param {AdminTeamsSettingsApiSetDefaultChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultChannels(requestParameters: AdminTeamsSettingsApiSetDefaultChannelsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamssettingsSetDefaultChannelsResponse> {
            return localVarFp.setDefaultChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the description of a given workspace.
         * @param {AdminTeamsSettingsApiSetDescriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDescription(requestParameters: AdminTeamsSettingsApiSetDescriptionRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamssettingsSetDescriptionResponse> {
            return localVarFp.setDescription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An API method that allows admins to set the discoverability of a given workspace
         * @param {AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDiscoverabilityOfWorkspace(requestParameters: AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> {
            return localVarFp.setDiscoverabilityOfWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets the icon of a workspace.
         * @param {AdminTeamsSettingsApiSetIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setIcon(requestParameters: AdminTeamsSettingsApiSetIconRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamssettingsSetIconResponse> {
            return localVarFp.setIcon(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the name of a given workspace.
         * @param {AdminTeamsSettingsApiSetNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setName(requestParameters: AdminTeamsSettingsApiSetNameRequest, options?: AxiosRequestConfig): AxiosPromise<AdminteamssettingsSetNameResponse> {
            return localVarFp.setName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInfo operation in AdminTeamsSettingsApi.
 * @export
 * @interface AdminTeamsSettingsApiGetInfoRequest
 */
export type AdminTeamsSettingsApiGetInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:read`
    * @type {string}
    * @memberof AdminTeamsSettingsApiGetInfo
    */
    readonly token: string
    
    /**
    * 
    * @type {string}
    * @memberof AdminTeamsSettingsApiGetInfo
    */
    readonly teamId: string
    
}

/**
 * Request parameters for setDefaultChannels operation in AdminTeamsSettingsApi.
 * @export
 * @interface AdminTeamsSettingsApiSetDefaultChannelsRequest
 */
export type AdminTeamsSettingsApiSetDefaultChannelsRequest = {
    
    /**
    * An array of channel IDs.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDefaultChannels
    */
    readonly channelIds: string
    
    /**
    * ID for the workspace to set the default channel for.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDefaultChannels
    */
    readonly teamId: string
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDefaultChannels
    */
    readonly token: string
    
} & AdminteamssettingsSetDefaultChannelsRequest

/**
 * Request parameters for setDescription operation in AdminTeamsSettingsApi.
 * @export
 * @interface AdminTeamsSettingsApiSetDescriptionRequest
 */
export type AdminTeamsSettingsApiSetDescriptionRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDescription
    */
    readonly token: string
    
    /**
    * The new description for the workspace.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDescription
    */
    readonly description: string
    
    /**
    * ID for the workspace to set the description for.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDescription
    */
    readonly teamId: string
    
} & AdminteamssettingsSetDescriptionRequest

/**
 * Request parameters for setDiscoverabilityOfWorkspace operation in AdminTeamsSettingsApi.
 * @export
 * @interface AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest
 */
export type AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDiscoverabilityOfWorkspace
    */
    readonly token: string
    
    /**
    * This workspace\\\'s discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDiscoverabilityOfWorkspace
    */
    readonly discoverability: string
    
    /**
    * The ID of the workspace to set discoverability on.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetDiscoverabilityOfWorkspace
    */
    readonly teamId: string
    
} & AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest

/**
 * Request parameters for setIcon operation in AdminTeamsSettingsApi.
 * @export
 * @interface AdminTeamsSettingsApiSetIconRequest
 */
export type AdminTeamsSettingsApiSetIconRequest = {
    
    /**
    * Image URL for the icon
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetIcon
    */
    readonly imageUrl: string
    
    /**
    * ID for the workspace to set the icon for.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetIcon
    */
    readonly teamId: string
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetIcon
    */
    readonly token: string
    
} & AdminteamssettingsSetIconRequest

/**
 * Request parameters for setName operation in AdminTeamsSettingsApi.
 * @export
 * @interface AdminTeamsSettingsApiSetNameRequest
 */
export type AdminTeamsSettingsApiSetNameRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetName
    */
    readonly token: string
    
    /**
    * The new name of the workspace.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetName
    */
    readonly name: string
    
    /**
    * ID for the workspace to set the name for.
    * @type {string}
    * @memberof AdminTeamsSettingsApiSetName
    */
    readonly teamId: string
    
} & AdminteamssettingsSetNameRequest

/**
 * AdminTeamsSettingsApiGenerated - object-oriented interface
 * @export
 * @class AdminTeamsSettingsApiGenerated
 * @extends {BaseAPI}
 */
export class AdminTeamsSettingsApiGenerated extends BaseAPI {
    /**
     * Fetch information about settings in a workspace
     * @param {AdminTeamsSettingsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsSettingsApiGenerated
     */
    public getInfo(requestParameters: AdminTeamsSettingsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return AdminTeamsSettingsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the default channels of a workspace.
     * @param {AdminTeamsSettingsApiSetDefaultChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsSettingsApiGenerated
     */
    public setDefaultChannels(requestParameters: AdminTeamsSettingsApiSetDefaultChannelsRequest, options?: AxiosRequestConfig) {
        return AdminTeamsSettingsApiFp(this.configuration).setDefaultChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the description of a given workspace.
     * @param {AdminTeamsSettingsApiSetDescriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsSettingsApiGenerated
     */
    public setDescription(requestParameters: AdminTeamsSettingsApiSetDescriptionRequest, options?: AxiosRequestConfig) {
        return AdminTeamsSettingsApiFp(this.configuration).setDescription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An API method that allows admins to set the discoverability of a given workspace
     * @param {AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsSettingsApiGenerated
     */
    public setDiscoverabilityOfWorkspace(requestParameters: AdminTeamsSettingsApiSetDiscoverabilityOfWorkspaceRequest, options?: AxiosRequestConfig) {
        return AdminTeamsSettingsApiFp(this.configuration).setDiscoverabilityOfWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets the icon of a workspace.
     * @param {AdminTeamsSettingsApiSetIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsSettingsApiGenerated
     */
    public setIcon(requestParameters: AdminTeamsSettingsApiSetIconRequest, options?: AxiosRequestConfig) {
        return AdminTeamsSettingsApiFp(this.configuration).setIcon(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the name of a given workspace.
     * @param {AdminTeamsSettingsApiSetNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsSettingsApiGenerated
     */
    public setName(requestParameters: AdminTeamsSettingsApiSetNameRequest, options?: AxiosRequestConfig) {
        return AdminTeamsSettingsApiFp(this.configuration).setName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
