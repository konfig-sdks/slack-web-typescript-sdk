/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppspermissionsscopesGetListResponse } from '../models';
// @ts-ignore
import { AppspermissionsscopesGetListdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsPermissionsScopesApi - axios parameter creator
 * @export
 */
export const AppsPermissionsScopesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns list of scopes this app has on a team.
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getList', 'token', token)
            const localVarPath = `/apps.permissions.scopes.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/apps.permissions.scopes.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsPermissionsScopesApi - functional programming interface
 * @export
 */
export const AppsPermissionsScopesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsPermissionsScopesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns list of scopes this app has on a team.
         * @param {AppsPermissionsScopesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: AppsPermissionsScopesApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppspermissionsscopesGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsPermissionsScopesApi - factory interface
 * @export
 */
export const AppsPermissionsScopesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsPermissionsScopesApiFp(configuration)
    return {
        /**
         * Returns list of scopes this app has on a team.
         * @param {AppsPermissionsScopesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppsPermissionsScopesApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<AppspermissionsscopesGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getList operation in AppsPermissionsScopesApi.
 * @export
 * @interface AppsPermissionsScopesApiGetListRequest
 */
export type AppsPermissionsScopesApiGetListRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof AppsPermissionsScopesApiGetList
    */
    readonly token: string
    
}

/**
 * AppsPermissionsScopesApiGenerated - object-oriented interface
 * @export
 * @class AppsPermissionsScopesApiGenerated
 * @extends {BaseAPI}
 */
export class AppsPermissionsScopesApiGenerated extends BaseAPI {
    /**
     * Returns list of scopes this app has on a team.
     * @param {AppsPermissionsScopesApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsPermissionsScopesApiGenerated
     */
    public getList(requestParameters: AppsPermissionsScopesApiGetListRequest, options?: AxiosRequestConfig) {
        return AppsPermissionsScopesApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
