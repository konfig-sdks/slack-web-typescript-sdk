/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReactionsAddRequest } from '../models';
// @ts-ignore
import { ReactionsAddResponse } from '../models';
// @ts-ignore
import { ReactionsAdddefaultResponse } from '../models';
// @ts-ignore
import { ReactionsGetResponseInner } from '../models';
// @ts-ignore
import { ReactionsGetdefaultResponse } from '../models';
// @ts-ignore
import { ReactionsListResponse } from '../models';
// @ts-ignore
import { ReactionsListdefaultResponse } from '../models';
// @ts-ignore
import { ReactionsRemoveRequest } from '../models';
// @ts-ignore
import { ReactionsRemoveResponse } from '../models';
// @ts-ignore
import { ReactionsRemovedefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReactionsApi - axios parameter creator
 * @export
 */
export const ReactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a reaction to an item.
         * @param {string} token Authentication token. Requires scope: &#x60;reactions:write&#x60;
         * @param {string} channel Channel where the message to add reaction to was posted.
         * @param {string} name Reaction (emoji) name.
         * @param {string} timestamp Timestamp of the message to add reaction to.
         * @param {ReactionsAddRequest} reactionsAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (token: string, channel: string, name: string, timestamp: string, reactionsAddRequest: ReactionsAddRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('add', 'token', token)
            // verify required parameter 'channel' is not null or undefined
            assertParamExists('add', 'channel', channel)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('add', 'name', name)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('add', 'timestamp', timestamp)
            // verify required parameter 'reactionsAddRequest' is not null or undefined
            assertParamExists('add', 'reactionsAddRequest', reactionsAddRequest)
            const localVarPath = `/reactions.add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reactions:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channel !== undefined) {
                await addFormParam('channel', channel, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (timestamp !== undefined) {
                await addFormParam('timestamp', timestamp, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: reactionsAddRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reactions.add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(reactionsAddRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets reactions for an item.
         * @param {string} token Authentication token. Requires scope: &#x60;reactions:read&#x60;
         * @param {string} [channel] Channel where the message to get reactions for was posted.
         * @param {string} [file] File to get reactions for.
         * @param {string} [fileComment] File comment to get reactions for.
         * @param {boolean} [full] If true always return the complete reaction list.
         * @param {string} [timestamp] Timestamp of the message to get reactions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (token: string, channel?: string, file?: string, fileComment?: string, full?: boolean, timestamp?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('get', 'token', token)
            const localVarPath = `/reactions.get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reactions:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (fileComment !== undefined) {
                localVarQueryParameter['file_comment'] = fileComment;
            }

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reactions.get',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists reactions made by a user.
         * @param {string} token Authentication token. Requires scope: &#x60;reactions:read&#x60;
         * @param {string} [user] Show reactions made by this user. Defaults to the authed user.
         * @param {boolean} [full] If true always return the complete reaction list.
         * @param {number} [count] 
         * @param {number} [page] 
         * @param {string} [cursor] Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request\&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more details.
         * @param {number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\&#39;t been reached.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (token: string, user?: string, full?: boolean, count?: number, page?: number, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('list', 'token', token)
            const localVarPath = `/reactions.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reactions:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reactions.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a reaction from an item.
         * @param {string} token Authentication token. Requires scope: &#x60;reactions:write&#x60;
         * @param {string} name Reaction (emoji) name.
         * @param {ReactionsRemoveRequest} reactionsRemoveRequest 
         * @param {string} [channel] Channel where the message to remove reaction from was posted.
         * @param {string} [file] File to remove reaction from.
         * @param {string} [fileComment] File comment to remove reaction from.
         * @param {string} [timestamp] Timestamp of the message to remove reaction from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (token: string, name: string, reactionsRemoveRequest: ReactionsRemoveRequest, channel?: string, file?: string, fileComment?: string, timestamp?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('remove', 'token', token)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('remove', 'name', name)
            // verify required parameter 'reactionsRemoveRequest' is not null or undefined
            assertParamExists('remove', 'reactionsRemoveRequest', reactionsRemoveRequest)
            const localVarPath = `/reactions.remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reactions:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channel !== undefined) {
                await addFormParam('channel', channel, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, false, true)
            }
    
            if (fileComment !== undefined) {
                await addFormParam('file_comment', fileComment, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (timestamp !== undefined) {
                await addFormParam('timestamp', timestamp, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: reactionsRemoveRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reactions.remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(reactionsRemoveRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReactionsApi - functional programming interface
 * @export
 */
export const ReactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a reaction to an item.
         * @param {ReactionsApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(requestParameters: ReactionsApiAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsAddResponse>> {
            const reactionsAddRequest: ReactionsAddRequest = {
                channel: requestParameters.channel,
                name: requestParameters.name,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(requestParameters.token, requestParameters.channel, requestParameters.name, requestParameters.timestamp, reactionsAddRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets reactions for an item.
         * @param {ReactionsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: ReactionsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReactionsGetResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.token, requestParameters.channel, requestParameters.file, requestParameters.fileComment, requestParameters.full, requestParameters.timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists reactions made by a user.
         * @param {ReactionsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: ReactionsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.token, requestParameters.user, requestParameters.full, requestParameters.count, requestParameters.page, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a reaction from an item.
         * @param {ReactionsApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: ReactionsApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsRemoveResponse>> {
            const reactionsRemoveRequest: ReactionsRemoveRequest = {
                channel: requestParameters.channel,
                file: requestParameters.file,
                file_comment: requestParameters.file_comment,
                name: requestParameters.name,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.token, requestParameters.name, reactionsRemoveRequest, requestParameters.channel, requestParameters.file, requestParameters.fileComment, requestParameters.timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReactionsApi - factory interface
 * @export
 */
export const ReactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReactionsApiFp(configuration)
    return {
        /**
         * Adds a reaction to an item.
         * @param {ReactionsApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(requestParameters: ReactionsApiAddRequest, options?: AxiosRequestConfig): AxiosPromise<ReactionsAddResponse> {
            return localVarFp.add(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets reactions for an item.
         * @param {ReactionsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: ReactionsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ReactionsGetResponseInner>> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists reactions made by a user.
         * @param {ReactionsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: ReactionsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ReactionsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a reaction from an item.
         * @param {ReactionsApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: ReactionsApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<ReactionsRemoveResponse> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for add operation in ReactionsApi.
 * @export
 * @interface ReactionsApiAddRequest
 */
export type ReactionsApiAddRequest = {
    
    /**
    * Authentication token. Requires scope: `reactions:write`
    * @type {string}
    * @memberof ReactionsApiAdd
    */
    readonly token: string
    
    /**
    * Channel where the message to add reaction to was posted.
    * @type {string}
    * @memberof ReactionsApiAdd
    */
    readonly channel: string
    
    /**
    * Reaction (emoji) name.
    * @type {string}
    * @memberof ReactionsApiAdd
    */
    readonly name: string
    
    /**
    * Timestamp of the message to add reaction to.
    * @type {string}
    * @memberof ReactionsApiAdd
    */
    readonly timestamp: string
    
} & ReactionsAddRequest

/**
 * Request parameters for get operation in ReactionsApi.
 * @export
 * @interface ReactionsApiGetRequest
 */
export type ReactionsApiGetRequest = {
    
    /**
    * Authentication token. Requires scope: `reactions:read`
    * @type {string}
    * @memberof ReactionsApiGet
    */
    readonly token: string
    
    /**
    * Channel where the message to get reactions for was posted.
    * @type {string}
    * @memberof ReactionsApiGet
    */
    readonly channel?: string
    
    /**
    * File to get reactions for.
    * @type {string}
    * @memberof ReactionsApiGet
    */
    readonly file?: string
    
    /**
    * File comment to get reactions for.
    * @type {string}
    * @memberof ReactionsApiGet
    */
    readonly fileComment?: string
    
    /**
    * If true always return the complete reaction list.
    * @type {boolean}
    * @memberof ReactionsApiGet
    */
    readonly full?: boolean
    
    /**
    * Timestamp of the message to get reactions for.
    * @type {string}
    * @memberof ReactionsApiGet
    */
    readonly timestamp?: string
    
}

/**
 * Request parameters for list operation in ReactionsApi.
 * @export
 * @interface ReactionsApiListRequest
 */
export type ReactionsApiListRequest = {
    
    /**
    * Authentication token. Requires scope: `reactions:read`
    * @type {string}
    * @memberof ReactionsApiList
    */
    readonly token: string
    
    /**
    * Show reactions made by this user. Defaults to the authed user.
    * @type {string}
    * @memberof ReactionsApiList
    */
    readonly user?: string
    
    /**
    * If true always return the complete reaction list.
    * @type {boolean}
    * @memberof ReactionsApiList
    */
    readonly full?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof ReactionsApiList
    */
    readonly count?: number
    
    /**
    * 
    * @type {number}
    * @memberof ReactionsApiList
    */
    readonly page?: number
    
    /**
    * Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\'s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details.
    * @type {string}
    * @memberof ReactionsApiList
    */
    readonly cursor?: string
    
    /**
    * The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\'t been reached.
    * @type {number}
    * @memberof ReactionsApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for remove operation in ReactionsApi.
 * @export
 * @interface ReactionsApiRemoveRequest
 */
export type ReactionsApiRemoveRequest = {
    
    /**
    * Authentication token. Requires scope: `reactions:write`
    * @type {string}
    * @memberof ReactionsApiRemove
    */
    readonly token: string
    
    /**
    * Reaction (emoji) name.
    * @type {string}
    * @memberof ReactionsApiRemove
    */
    readonly name: string
    
    /**
    * Channel where the message to remove reaction from was posted.
    * @type {string}
    * @memberof ReactionsApiRemove
    */
    readonly channel?: string
    
    /**
    * File to remove reaction from.
    * @type {string}
    * @memberof ReactionsApiRemove
    */
    readonly file?: string
    
    /**
    * File comment to remove reaction from.
    * @type {string}
    * @memberof ReactionsApiRemove
    */
    readonly fileComment?: string
    
    /**
    * Timestamp of the message to remove reaction from.
    * @type {string}
    * @memberof ReactionsApiRemove
    */
    readonly timestamp?: string
    
} & ReactionsRemoveRequest

/**
 * ReactionsApiGenerated - object-oriented interface
 * @export
 * @class ReactionsApiGenerated
 * @extends {BaseAPI}
 */
export class ReactionsApiGenerated extends BaseAPI {
    /**
     * Adds a reaction to an item.
     * @param {ReactionsApiAddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiGenerated
     */
    public add(requestParameters: ReactionsApiAddRequest, options?: AxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).add(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets reactions for an item.
     * @param {ReactionsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiGenerated
     */
    public get(requestParameters: ReactionsApiGetRequest, options?: AxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists reactions made by a user.
     * @param {ReactionsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiGenerated
     */
    public list(requestParameters: ReactionsApiListRequest, options?: AxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a reaction from an item.
     * @param {ReactionsApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiGenerated
     */
    public remove(requestParameters: ReactionsApiRemoveRequest, options?: AxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
