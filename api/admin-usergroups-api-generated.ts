/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminusergroupsAddDefaultChannelsRequest } from '../models';
// @ts-ignore
import { AdminusergroupsAddDefaultChannelsResponse } from '../models';
// @ts-ignore
import { AdminusergroupsAddDefaultChannelsdefaultResponse } from '../models';
// @ts-ignore
import { AdminusergroupsAssociateDefaultWorkspacesRequest } from '../models';
// @ts-ignore
import { AdminusergroupsAssociateDefaultWorkspacesResponse } from '../models';
// @ts-ignore
import { AdminusergroupsAssociateDefaultWorkspacesdefaultResponse } from '../models';
// @ts-ignore
import { AdminusergroupsListChannelsGetResponse } from '../models';
// @ts-ignore
import { AdminusergroupsListChannelsGetdefaultResponse } from '../models';
// @ts-ignore
import { AdminusergroupsRemoveChannelsRequest } from '../models';
// @ts-ignore
import { AdminusergroupsRemoveChannelsResponse } from '../models';
// @ts-ignore
import { AdminusergroupsRemoveChannelsdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminUsergroupsApi - axios parameter creator
 * @export
 */
export const AdminUsergroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more default channels to an IDP group.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
         * @param {string} channelIds Comma separated string of channel IDs.
         * @param {string} usergroupId ID of the IDP group to add default channels for.
         * @param {AdminusergroupsAddDefaultChannelsRequest} adminusergroupsAddDefaultChannelsRequest 
         * @param {string} [teamId] The workspace to add default channels in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDefaultChannels: async (token: string, channelIds: string, usergroupId: string, adminusergroupsAddDefaultChannelsRequest: AdminusergroupsAddDefaultChannelsRequest, teamId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('addDefaultChannels', 'token', token)
            // verify required parameter 'channelIds' is not null or undefined
            assertParamExists('addDefaultChannels', 'channelIds', channelIds)
            // verify required parameter 'usergroupId' is not null or undefined
            assertParamExists('addDefaultChannels', 'usergroupId', usergroupId)
            // verify required parameter 'adminusergroupsAddDefaultChannelsRequest' is not null or undefined
            assertParamExists('addDefaultChannels', 'adminusergroupsAddDefaultChannelsRequest', adminusergroupsAddDefaultChannelsRequest)
            const localVarPath = `/admin.usergroups.addChannels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.usergroups:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channelIds !== undefined) {
                await addFormParam('channel_ids', channelIds, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (usergroupId !== undefined) {
                await addFormParam('usergroup_id', usergroupId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusergroupsAddDefaultChannelsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.usergroups.addChannels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusergroupsAddDefaultChannelsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Associate one or more default workspaces with an organization-wide IDP group.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
         * @param {string} teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
         * @param {string} usergroupId An encoded usergroup (IDP Group) ID.
         * @param {AdminusergroupsAssociateDefaultWorkspacesRequest} adminusergroupsAssociateDefaultWorkspacesRequest 
         * @param {boolean} [autoProvision] When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateDefaultWorkspaces: async (token: string, teamIds: string, usergroupId: string, adminusergroupsAssociateDefaultWorkspacesRequest: AdminusergroupsAssociateDefaultWorkspacesRequest, autoProvision?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('associateDefaultWorkspaces', 'token', token)
            // verify required parameter 'teamIds' is not null or undefined
            assertParamExists('associateDefaultWorkspaces', 'teamIds', teamIds)
            // verify required parameter 'usergroupId' is not null or undefined
            assertParamExists('associateDefaultWorkspaces', 'usergroupId', usergroupId)
            // verify required parameter 'adminusergroupsAssociateDefaultWorkspacesRequest' is not null or undefined
            assertParamExists('associateDefaultWorkspaces', 'adminusergroupsAssociateDefaultWorkspacesRequest', adminusergroupsAssociateDefaultWorkspacesRequest)
            const localVarPath = `/admin.usergroups.addTeams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.teams:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (autoProvision !== undefined) {
                await addFormParam('auto_provision', autoProvision, false, true)
            }
    
            if (teamIds !== undefined) {
                await addFormParam('team_ids', teamIds, false, true)
            }
    
            if (usergroupId !== undefined) {
                await addFormParam('usergroup_id', usergroupId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusergroupsAssociateDefaultWorkspacesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.usergroups.addTeams',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusergroupsAssociateDefaultWorkspacesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the channels linked to an org-level IDP group (user group).
         * @param {string} token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
         * @param {string} usergroupId ID of the IDP group to list default channels for.
         * @param {string} [teamId] ID of the the workspace.
         * @param {boolean} [includeNumMembers] Flag to include or exclude the count of members per channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChannelsGet: async (token: string, usergroupId: string, teamId?: string, includeNumMembers?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listChannelsGet', 'token', token)
            // verify required parameter 'usergroupId' is not null or undefined
            assertParamExists('listChannelsGet', 'usergroupId', usergroupId)
            const localVarPath = `/admin.usergroups.listChannels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.usergroups:read"], configuration)
            if (usergroupId !== undefined) {
                localVarQueryParameter['usergroup_id'] = usergroupId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (includeNumMembers !== undefined) {
                localVarQueryParameter['include_num_members'] = includeNumMembers;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.usergroups.listChannels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more default channels from an org-level IDP group (user group).
         * @param {string} token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
         * @param {string} channelIds Comma-separated string of channel IDs
         * @param {string} usergroupId ID of the IDP Group
         * @param {AdminusergroupsRemoveChannelsRequest} adminusergroupsRemoveChannelsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChannels: async (token: string, channelIds: string, usergroupId: string, adminusergroupsRemoveChannelsRequest: AdminusergroupsRemoveChannelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('removeChannels', 'token', token)
            // verify required parameter 'channelIds' is not null or undefined
            assertParamExists('removeChannels', 'channelIds', channelIds)
            // verify required parameter 'usergroupId' is not null or undefined
            assertParamExists('removeChannels', 'usergroupId', usergroupId)
            // verify required parameter 'adminusergroupsRemoveChannelsRequest' is not null or undefined
            assertParamExists('removeChannels', 'adminusergroupsRemoveChannelsRequest', adminusergroupsRemoveChannelsRequest)
            const localVarPath = `/admin.usergroups.removeChannels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.usergroups:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channelIds !== undefined) {
                await addFormParam('channel_ids', channelIds, false, true)
            }
    
            if (usergroupId !== undefined) {
                await addFormParam('usergroup_id', usergroupId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusergroupsRemoveChannelsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.usergroups.removeChannels',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusergroupsRemoveChannelsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUsergroupsApi - functional programming interface
 * @export
 */
export const AdminUsergroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUsergroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more default channels to an IDP group.
         * @param {AdminUsergroupsApiAddDefaultChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDefaultChannels(requestParameters: AdminUsergroupsApiAddDefaultChannelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusergroupsAddDefaultChannelsResponse>> {
            const adminusergroupsAddDefaultChannelsRequest: AdminusergroupsAddDefaultChannelsRequest = {
                channel_ids: requestParameters.channel_ids,
                team_id: requestParameters.team_id,
                usergroup_id: requestParameters.usergroup_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDefaultChannels(requestParameters.token, requestParameters.channelIds, requestParameters.usergroupId, adminusergroupsAddDefaultChannelsRequest, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Associate one or more default workspaces with an organization-wide IDP group.
         * @param {AdminUsergroupsApiAssociateDefaultWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associateDefaultWorkspaces(requestParameters: AdminUsergroupsApiAssociateDefaultWorkspacesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusergroupsAssociateDefaultWorkspacesResponse>> {
            const adminusergroupsAssociateDefaultWorkspacesRequest: AdminusergroupsAssociateDefaultWorkspacesRequest = {
                auto_provision: requestParameters.auto_provision,
                team_ids: requestParameters.team_ids,
                usergroup_id: requestParameters.usergroup_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.associateDefaultWorkspaces(requestParameters.token, requestParameters.teamIds, requestParameters.usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, requestParameters.autoProvision, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the channels linked to an org-level IDP group (user group).
         * @param {AdminUsergroupsApiListChannelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listChannelsGet(requestParameters: AdminUsergroupsApiListChannelsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusergroupsListChannelsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listChannelsGet(requestParameters.token, requestParameters.usergroupId, requestParameters.teamId, requestParameters.includeNumMembers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove one or more default channels from an org-level IDP group (user group).
         * @param {AdminUsergroupsApiRemoveChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeChannels(requestParameters: AdminUsergroupsApiRemoveChannelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusergroupsRemoveChannelsResponse>> {
            const adminusergroupsRemoveChannelsRequest: AdminusergroupsRemoveChannelsRequest = {
                channel_ids: requestParameters.channel_ids,
                usergroup_id: requestParameters.usergroup_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeChannels(requestParameters.token, requestParameters.channelIds, requestParameters.usergroupId, adminusergroupsRemoveChannelsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUsergroupsApi - factory interface
 * @export
 */
export const AdminUsergroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUsergroupsApiFp(configuration)
    return {
        /**
         * Add one or more default channels to an IDP group.
         * @param {AdminUsergroupsApiAddDefaultChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDefaultChannels(requestParameters: AdminUsergroupsApiAddDefaultChannelsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusergroupsAddDefaultChannelsResponse> {
            return localVarFp.addDefaultChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Associate one or more default workspaces with an organization-wide IDP group.
         * @param {AdminUsergroupsApiAssociateDefaultWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateDefaultWorkspaces(requestParameters: AdminUsergroupsApiAssociateDefaultWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusergroupsAssociateDefaultWorkspacesResponse> {
            return localVarFp.associateDefaultWorkspaces(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the channels linked to an org-level IDP group (user group).
         * @param {AdminUsergroupsApiListChannelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listChannelsGet(requestParameters: AdminUsergroupsApiListChannelsGetRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusergroupsListChannelsGetResponse> {
            return localVarFp.listChannelsGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more default channels from an org-level IDP group (user group).
         * @param {AdminUsergroupsApiRemoveChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeChannels(requestParameters: AdminUsergroupsApiRemoveChannelsRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusergroupsRemoveChannelsResponse> {
            return localVarFp.removeChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDefaultChannels operation in AdminUsergroupsApi.
 * @export
 * @interface AdminUsergroupsApiAddDefaultChannelsRequest
 */
export type AdminUsergroupsApiAddDefaultChannelsRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.usergroups:write`
    * @type {string}
    * @memberof AdminUsergroupsApiAddDefaultChannels
    */
    readonly token: string
    
    /**
    * Comma separated string of channel IDs.
    * @type {string}
    * @memberof AdminUsergroupsApiAddDefaultChannels
    */
    readonly channelIds: string
    
    /**
    * ID of the IDP group to add default channels for.
    * @type {string}
    * @memberof AdminUsergroupsApiAddDefaultChannels
    */
    readonly usergroupId: string
    
    /**
    * The workspace to add default channels in.
    * @type {string}
    * @memberof AdminUsergroupsApiAddDefaultChannels
    */
    readonly teamId?: string
    
} & AdminusergroupsAddDefaultChannelsRequest

/**
 * Request parameters for associateDefaultWorkspaces operation in AdminUsergroupsApi.
 * @export
 * @interface AdminUsergroupsApiAssociateDefaultWorkspacesRequest
 */
export type AdminUsergroupsApiAssociateDefaultWorkspacesRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.teams:write`
    * @type {string}
    * @memberof AdminUsergroupsApiAssociateDefaultWorkspaces
    */
    readonly token: string
    
    /**
    * A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    * @type {string}
    * @memberof AdminUsergroupsApiAssociateDefaultWorkspaces
    */
    readonly teamIds: string
    
    /**
    * An encoded usergroup (IDP Group) ID.
    * @type {string}
    * @memberof AdminUsergroupsApiAssociateDefaultWorkspaces
    */
    readonly usergroupId: string
    
    /**
    * When `true`, this method automatically creates new workspace accounts for the IDP group members.
    * @type {boolean}
    * @memberof AdminUsergroupsApiAssociateDefaultWorkspaces
    */
    readonly autoProvision?: boolean
    
} & AdminusergroupsAssociateDefaultWorkspacesRequest

/**
 * Request parameters for listChannelsGet operation in AdminUsergroupsApi.
 * @export
 * @interface AdminUsergroupsApiListChannelsGetRequest
 */
export type AdminUsergroupsApiListChannelsGetRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.usergroups:read`
    * @type {string}
    * @memberof AdminUsergroupsApiListChannelsGet
    */
    readonly token: string
    
    /**
    * ID of the IDP group to list default channels for.
    * @type {string}
    * @memberof AdminUsergroupsApiListChannelsGet
    */
    readonly usergroupId: string
    
    /**
    * ID of the the workspace.
    * @type {string}
    * @memberof AdminUsergroupsApiListChannelsGet
    */
    readonly teamId?: string
    
    /**
    * Flag to include or exclude the count of members per channel.
    * @type {boolean}
    * @memberof AdminUsergroupsApiListChannelsGet
    */
    readonly includeNumMembers?: boolean
    
}

/**
 * Request parameters for removeChannels operation in AdminUsergroupsApi.
 * @export
 * @interface AdminUsergroupsApiRemoveChannelsRequest
 */
export type AdminUsergroupsApiRemoveChannelsRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.usergroups:write`
    * @type {string}
    * @memberof AdminUsergroupsApiRemoveChannels
    */
    readonly token: string
    
    /**
    * Comma-separated string of channel IDs
    * @type {string}
    * @memberof AdminUsergroupsApiRemoveChannels
    */
    readonly channelIds: string
    
    /**
    * ID of the IDP Group
    * @type {string}
    * @memberof AdminUsergroupsApiRemoveChannels
    */
    readonly usergroupId: string
    
} & AdminusergroupsRemoveChannelsRequest

/**
 * AdminUsergroupsApiGenerated - object-oriented interface
 * @export
 * @class AdminUsergroupsApiGenerated
 * @extends {BaseAPI}
 */
export class AdminUsergroupsApiGenerated extends BaseAPI {
    /**
     * Add one or more default channels to an IDP group.
     * @param {AdminUsergroupsApiAddDefaultChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsergroupsApiGenerated
     */
    public addDefaultChannels(requestParameters: AdminUsergroupsApiAddDefaultChannelsRequest, options?: AxiosRequestConfig) {
        return AdminUsergroupsApiFp(this.configuration).addDefaultChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param {AdminUsergroupsApiAssociateDefaultWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsergroupsApiGenerated
     */
    public associateDefaultWorkspaces(requestParameters: AdminUsergroupsApiAssociateDefaultWorkspacesRequest, options?: AxiosRequestConfig) {
        return AdminUsergroupsApiFp(this.configuration).associateDefaultWorkspaces(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the channels linked to an org-level IDP group (user group).
     * @param {AdminUsergroupsApiListChannelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsergroupsApiGenerated
     */
    public listChannelsGet(requestParameters: AdminUsergroupsApiListChannelsGetRequest, options?: AxiosRequestConfig) {
        return AdminUsergroupsApiFp(this.configuration).listChannelsGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param {AdminUsergroupsApiRemoveChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsergroupsApiGenerated
     */
    public removeChannels(requestParameters: AdminUsergroupsApiRemoveChannelsRequest, options?: AxiosRequestConfig) {
        return AdminUsergroupsApiFp(this.configuration).removeChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
