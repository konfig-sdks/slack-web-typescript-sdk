/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RemindersAddRequest } from '../models';
// @ts-ignore
import { RemindersAddResponse } from '../models';
// @ts-ignore
import { RemindersAdddefaultResponse } from '../models';
// @ts-ignore
import { RemindersCompleteRequest } from '../models';
// @ts-ignore
import { RemindersCompleteResponse } from '../models';
// @ts-ignore
import { RemindersCompletedefaultResponse } from '../models';
// @ts-ignore
import { RemindersDeleteRequest } from '../models';
// @ts-ignore
import { RemindersDeleteResponse } from '../models';
// @ts-ignore
import { RemindersDeletedefaultResponse } from '../models';
// @ts-ignore
import { RemindersInfoResponse } from '../models';
// @ts-ignore
import { RemindersInfodefaultResponse } from '../models';
// @ts-ignore
import { RemindersListResponse } from '../models';
// @ts-ignore
import { RemindersListdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RemindersApi - axios parameter creator
 * @export
 */
export const RemindersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a reminder.
         * @param {string} token Authentication token. Requires scope: &#x60;reminders:write&#x60;
         * @param {string} text The content of the reminder
         * @param {string} time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;)
         * @param {RemindersAddRequest} remindersAddRequest 
         * @param {string} [user] The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (token: string, text: string, time: string, remindersAddRequest: RemindersAddRequest, user?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('add', 'token', token)
            // verify required parameter 'text' is not null or undefined
            assertParamExists('add', 'text', text)
            // verify required parameter 'time' is not null or undefined
            assertParamExists('add', 'time', time)
            // verify required parameter 'remindersAddRequest' is not null or undefined
            assertParamExists('add', 'remindersAddRequest', remindersAddRequest)
            const localVarPath = `/reminders.add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reminders:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (text !== undefined) {
                await addFormParam('text', text, false, true)
            }
    
            if (time !== undefined) {
                await addFormParam('time', time, false, true)
            }
    
            if (user !== undefined) {
                await addFormParam('user', user, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: remindersAddRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reminders.add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(remindersAddRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a reminder as complete.
         * @param {string} [token] Authentication token. Requires scope: &#x60;reminders:write&#x60;
         * @param {string} [reminder] The ID of the reminder to be marked as complete
         * @param {RemindersCompleteRequest} [remindersCompleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: async (token?: string, reminder?: string, remindersCompleteRequest?: RemindersCompleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reminders.complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reminders:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (reminder !== undefined) {
                await addFormParam('reminder', reminder, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: remindersCompleteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reminders.complete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(remindersCompleteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a reminder.
         * @param {string} [token] Authentication token. Requires scope: &#x60;reminders:write&#x60;
         * @param {string} [reminder] The ID of the reminder
         * @param {RemindersDeleteRequest} [remindersDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (token?: string, reminder?: string, remindersDeleteRequest?: RemindersDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reminders.delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reminders:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (reminder !== undefined) {
                await addFormParam('reminder', reminder, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: remindersDeleteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reminders.delete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(remindersDeleteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information about a reminder.
         * @param {string} [token] Authentication token. Requires scope: &#x60;reminders:read&#x60;
         * @param {string} [reminder] The ID of the reminder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info: async (token?: string, reminder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reminders.info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reminders:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (reminder !== undefined) {
                localVarQueryParameter['reminder'] = reminder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reminders.info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all reminders created by or for a given user.
         * @param {string} [token] Authentication token. Requires scope: &#x60;reminders:read&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reminders.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["reminders:read"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reminders.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemindersApi - functional programming interface
 * @export
 */
export const RemindersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemindersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a reminder.
         * @param {RemindersApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(requestParameters: RemindersApiAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemindersAddResponse>> {
            const remindersAddRequest: RemindersAddRequest = {
                text: requestParameters.text,
                time: requestParameters.time,
                user: requestParameters.user
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(requestParameters.token, requestParameters.text, requestParameters.time, remindersAddRequest, requestParameters.user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a reminder as complete.
         * @param {RemindersApiCompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complete(requestParameters: RemindersApiCompleteRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemindersCompleteResponse>> {
            const remindersCompleteRequest: RemindersCompleteRequest = {
                reminder: requestParameters.reminder
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.complete(requestParameters.token, requestParameters.reminder, remindersCompleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a reminder.
         * @param {RemindersApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: RemindersApiDeleteRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemindersDeleteResponse>> {
            const remindersDeleteRequest: RemindersDeleteRequest = {
                reminder: requestParameters.reminder
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.token, requestParameters.reminder, remindersDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets information about a reminder.
         * @param {RemindersApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async info(requestParameters: RemindersApiInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemindersInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.info(requestParameters.token, requestParameters.reminder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all reminders created by or for a given user.
         * @param {RemindersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: RemindersApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemindersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RemindersApi - factory interface
 * @export
 */
export const RemindersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemindersApiFp(configuration)
    return {
        /**
         * Creates a reminder.
         * @param {RemindersApiAddRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(requestParameters: RemindersApiAddRequest, options?: AxiosRequestConfig): AxiosPromise<RemindersAddResponse> {
            return localVarFp.add(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a reminder as complete.
         * @param {RemindersApiCompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete(requestParameters: RemindersApiCompleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RemindersCompleteResponse> {
            return localVarFp.complete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a reminder.
         * @param {RemindersApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: RemindersApiDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RemindersDeleteResponse> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information about a reminder.
         * @param {RemindersApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info(requestParameters: RemindersApiInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RemindersInfoResponse> {
            return localVarFp.info(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all reminders created by or for a given user.
         * @param {RemindersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: RemindersApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RemindersListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for add operation in RemindersApi.
 * @export
 * @interface RemindersApiAddRequest
 */
export type RemindersApiAddRequest = {
    
    /**
    * Authentication token. Requires scope: `reminders:write`
    * @type {string}
    * @memberof RemindersApiAdd
    */
    readonly token: string
    
    /**
    * The content of the reminder
    * @type {string}
    * @memberof RemindersApiAdd
    */
    readonly text: string
    
    /**
    * When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\"in 15 minutes,\\\" or \\\"every Thursday\\\")
    * @type {string}
    * @memberof RemindersApiAdd
    */
    readonly time: string
    
    /**
    * The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
    * @type {string}
    * @memberof RemindersApiAdd
    */
    readonly user?: string
    
} & RemindersAddRequest

/**
 * Request parameters for complete operation in RemindersApi.
 * @export
 * @interface RemindersApiCompleteRequest
 */
export type RemindersApiCompleteRequest = {
    
    /**
    * Authentication token. Requires scope: `reminders:write`
    * @type {string}
    * @memberof RemindersApiComplete
    */
    readonly token?: string
    
    /**
    * The ID of the reminder to be marked as complete
    * @type {string}
    * @memberof RemindersApiComplete
    */
    readonly reminder?: string
    
} & RemindersCompleteRequest

/**
 * Request parameters for delete operation in RemindersApi.
 * @export
 * @interface RemindersApiDeleteRequest
 */
export type RemindersApiDeleteRequest = {
    
    /**
    * Authentication token. Requires scope: `reminders:write`
    * @type {string}
    * @memberof RemindersApiDelete
    */
    readonly token?: string
    
    /**
    * The ID of the reminder
    * @type {string}
    * @memberof RemindersApiDelete
    */
    readonly reminder?: string
    
} & RemindersDeleteRequest

/**
 * Request parameters for info operation in RemindersApi.
 * @export
 * @interface RemindersApiInfoRequest
 */
export type RemindersApiInfoRequest = {
    
    /**
    * Authentication token. Requires scope: `reminders:read`
    * @type {string}
    * @memberof RemindersApiInfo
    */
    readonly token?: string
    
    /**
    * The ID of the reminder
    * @type {string}
    * @memberof RemindersApiInfo
    */
    readonly reminder?: string
    
}

/**
 * Request parameters for list operation in RemindersApi.
 * @export
 * @interface RemindersApiListRequest
 */
export type RemindersApiListRequest = {
    
    /**
    * Authentication token. Requires scope: `reminders:read`
    * @type {string}
    * @memberof RemindersApiList
    */
    readonly token?: string
    
}

/**
 * RemindersApiGenerated - object-oriented interface
 * @export
 * @class RemindersApiGenerated
 * @extends {BaseAPI}
 */
export class RemindersApiGenerated extends BaseAPI {
    /**
     * Creates a reminder.
     * @param {RemindersApiAddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApiGenerated
     */
    public add(requestParameters: RemindersApiAddRequest, options?: AxiosRequestConfig) {
        return RemindersApiFp(this.configuration).add(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a reminder as complete.
     * @param {RemindersApiCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApiGenerated
     */
    public complete(requestParameters: RemindersApiCompleteRequest = {}, options?: AxiosRequestConfig) {
        return RemindersApiFp(this.configuration).complete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a reminder.
     * @param {RemindersApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApiGenerated
     */
    public delete(requestParameters: RemindersApiDeleteRequest = {}, options?: AxiosRequestConfig) {
        return RemindersApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets information about a reminder.
     * @param {RemindersApiInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApiGenerated
     */
    public info(requestParameters: RemindersApiInfoRequest = {}, options?: AxiosRequestConfig) {
        return RemindersApiFp(this.configuration).info(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all reminders created by or for a given user.
     * @param {RemindersApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApiGenerated
     */
    public list(requestParameters: RemindersApiListRequest = {}, options?: AxiosRequestConfig) {
        return RemindersApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
