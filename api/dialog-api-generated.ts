/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DialogOpenResponse } from '../models';
// @ts-ignore
import { DialogOpendefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DialogApi - axios parameter creator
 * @export
 */
export const DialogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Open a dialog with a user
         * @param {string} token Authentication token. Requires scope: &#x60;none&#x60;
         * @param {string} dialog The dialog definition. This must be a JSON-encoded string.
         * @param {string} triggerId Exchange a trigger to post to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        open: async (token: string, dialog: string, triggerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('open', 'token', token)
            // verify required parameter 'dialog' is not null or undefined
            assertParamExists('open', 'dialog', dialog)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('open', 'triggerId', triggerId)
            const localVarPath = `/dialog.open`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (dialog !== undefined) {
                localVarQueryParameter['dialog'] = dialog;
            }

            if (triggerId !== undefined) {
                localVarQueryParameter['trigger_id'] = triggerId;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dialog.open',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DialogApi - functional programming interface
 * @export
 */
export const DialogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DialogApiAxiosParamCreator(configuration)
    return {
        /**
         * Open a dialog with a user
         * @param {DialogApiOpenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async open(requestParameters: DialogApiOpenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DialogOpenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.open(requestParameters.token, requestParameters.dialog, requestParameters.triggerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DialogApi - factory interface
 * @export
 */
export const DialogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DialogApiFp(configuration)
    return {
        /**
         * Open a dialog with a user
         * @param {DialogApiOpenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        open(requestParameters: DialogApiOpenRequest, options?: AxiosRequestConfig): AxiosPromise<DialogOpenResponse> {
            return localVarFp.open(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for open operation in DialogApi.
 * @export
 * @interface DialogApiOpenRequest
 */
export type DialogApiOpenRequest = {
    
    /**
    * Authentication token. Requires scope: `none`
    * @type {string}
    * @memberof DialogApiOpen
    */
    readonly token: string
    
    /**
    * The dialog definition. This must be a JSON-encoded string.
    * @type {string}
    * @memberof DialogApiOpen
    */
    readonly dialog: string
    
    /**
    * Exchange a trigger to post to the user.
    * @type {string}
    * @memberof DialogApiOpen
    */
    readonly triggerId: string
    
}

/**
 * DialogApiGenerated - object-oriented interface
 * @export
 * @class DialogApiGenerated
 * @extends {BaseAPI}
 */
export class DialogApiGenerated extends BaseAPI {
    /**
     * Open a dialog with a user
     * @param {DialogApiOpenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DialogApiGenerated
     */
    public open(requestParameters: DialogApiOpenRequest, options?: AxiosRequestConfig) {
        return DialogApiFp(this.configuration).open(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
