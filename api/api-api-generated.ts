/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiTestResponse } from '../models';
// @ts-ignore
import { ApiTestdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks API calling code.
         * @param {string} [error] Error response to return
         * @param {string} [foo] example property to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test: async (error?: string, foo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api.test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["none"], configuration)
            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }

            if (foo !== undefined) {
                localVarQueryParameter['foo'] = foo;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api.test',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks API calling code.
         * @param {ApiApiTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async test(requestParameters: ApiApiTestRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.test(requestParameters.error, requestParameters.foo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * Checks API calling code.
         * @param {ApiApiTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(requestParameters: ApiApiTestRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApiTestResponse> {
            return localVarFp.test(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for test operation in ApiApi.
 * @export
 * @interface ApiApiTestRequest
 */
export type ApiApiTestRequest = {
    
    /**
    * Error response to return
    * @type {string}
    * @memberof ApiApiTest
    */
    readonly error?: string
    
    /**
    * example property to return
    * @type {string}
    * @memberof ApiApiTest
    */
    readonly foo?: string
    
}

/**
 * ApiApiGenerated - object-oriented interface
 * @export
 * @class ApiApiGenerated
 * @extends {BaseAPI}
 */
export class ApiApiGenerated extends BaseAPI {
    /**
     * Checks API calling code.
     * @param {ApiApiTestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiGenerated
     */
    public test(requestParameters: ApiApiTestRequest = {}, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).test(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
