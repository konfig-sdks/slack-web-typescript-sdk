/* tslint:disable */
/* eslint-disable */
/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminusersAddWorkspaceUserRequest } from '../models';
// @ts-ignore
import { AdminusersAddWorkspaceUserResponse } from '../models';
// @ts-ignore
import { AdminusersAddWorkspaceUserdefaultResponse } from '../models';
// @ts-ignore
import { AdminusersInviteUserToWorkspaceRequest } from '../models';
// @ts-ignore
import { AdminusersInviteUserToWorkspaceResponse } from '../models';
// @ts-ignore
import { AdminusersInviteUserToWorkspacedefaultResponse } from '../models';
// @ts-ignore
import { AdminusersListWorkspaceUsersResponse } from '../models';
// @ts-ignore
import { AdminusersListWorkspaceUsersdefaultResponse } from '../models';
// @ts-ignore
import { AdminusersRemoveUserFromWorkspaceRequest } from '../models';
// @ts-ignore
import { AdminusersRemoveUserFromWorkspaceResponse } from '../models';
// @ts-ignore
import { AdminusersRemoveUserFromWorkspacedefaultResponse } from '../models';
// @ts-ignore
import { AdminusersSetAdminUserRequest } from '../models';
// @ts-ignore
import { AdminusersSetAdminUserResponse } from '../models';
// @ts-ignore
import { AdminusersSetAdminUserdefaultResponse } from '../models';
// @ts-ignore
import { AdminusersSetExpirationGuestRequest } from '../models';
// @ts-ignore
import { AdminusersSetExpirationGuestResponse } from '../models';
// @ts-ignore
import { AdminusersSetExpirationGuestdefaultResponse } from '../models';
// @ts-ignore
import { AdminusersSetRegularUserRequest } from '../models';
// @ts-ignore
import { AdminusersSetRegularUserResponse } from '../models';
// @ts-ignore
import { AdminusersSetRegularUserdefaultResponse } from '../models';
// @ts-ignore
import { AdminusersSetWorkspaceOwnerRequest } from '../models';
// @ts-ignore
import { AdminusersSetWorkspaceOwnerResponse } from '../models';
// @ts-ignore
import { AdminusersSetWorkspaceOwnerdefaultResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminUsersApi - axios parameter creator
 * @export
 */
export const AdminUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an Enterprise user to a workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} userId The ID of the user to add to the workspace.
         * @param {AdminusersAddWorkspaceUserRequest} adminusersAddWorkspaceUserRequest 
         * @param {string} [channelIds] Comma separated values of channel IDs to add user in the new workspace.
         * @param {boolean} [isRestricted] True if user should be added to the workspace as a guest.
         * @param {boolean} [isUltraRestricted] True if user should be added to the workspace as a single-channel guest.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkspaceUser: async (token: string, teamId: string, userId: string, adminusersAddWorkspaceUserRequest: AdminusersAddWorkspaceUserRequest, channelIds?: string, isRestricted?: boolean, isUltraRestricted?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('addWorkspaceUser', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('addWorkspaceUser', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addWorkspaceUser', 'userId', userId)
            // verify required parameter 'adminusersAddWorkspaceUserRequest' is not null or undefined
            assertParamExists('addWorkspaceUser', 'adminusersAddWorkspaceUserRequest', adminusersAddWorkspaceUserRequest)
            const localVarPath = `/admin.users.assign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channelIds !== undefined) {
                await addFormParam('channel_ids', channelIds, false, true)
            }
    
            if (isRestricted !== undefined) {
                await addFormParam('is_restricted', isRestricted, false, true)
            }
    
            if (isUltraRestricted !== undefined) {
                await addFormParam('is_ultra_restricted', isUltraRestricted, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersAddWorkspaceUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.assign',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersAddWorkspaceUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite a user to a workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
         * @param {string} email The email address of the person to invite.
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {AdminusersInviteUserToWorkspaceRequest} adminusersInviteUserToWorkspaceRequest 
         * @param {string} [customMessage] An optional message to send to the user in the invite email.
         * @param {string} [guestExpirationTs] Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
         * @param {boolean} [isRestricted] Is this user a multi-channel guest user? (default: false)
         * @param {boolean} [isUltraRestricted] Is this user a single channel guest user? (default: false)
         * @param {string} [realName] Full name of the user.
         * @param {boolean} [resend] Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToWorkspace: async (token: string, channelIds: string, email: string, teamId: string, adminusersInviteUserToWorkspaceRequest: AdminusersInviteUserToWorkspaceRequest, customMessage?: string, guestExpirationTs?: string, isRestricted?: boolean, isUltraRestricted?: boolean, realName?: string, resend?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('inviteUserToWorkspace', 'token', token)
            // verify required parameter 'channelIds' is not null or undefined
            assertParamExists('inviteUserToWorkspace', 'channelIds', channelIds)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('inviteUserToWorkspace', 'email', email)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('inviteUserToWorkspace', 'teamId', teamId)
            // verify required parameter 'adminusersInviteUserToWorkspaceRequest' is not null or undefined
            assertParamExists('inviteUserToWorkspace', 'adminusersInviteUserToWorkspaceRequest', adminusersInviteUserToWorkspaceRequest)
            const localVarPath = `/admin.users.invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (channelIds !== undefined) {
                await addFormParam('channel_ids', channelIds, false, true)
            }
    
            if (customMessage !== undefined) {
                await addFormParam('custom_message', customMessage, false, true)
            }
    
            if (email !== undefined) {
                await addFormParam('email', email, false, true)
            }
    
            if (guestExpirationTs !== undefined) {
                await addFormParam('guest_expiration_ts', guestExpirationTs, false, true)
            }
    
            if (isRestricted !== undefined) {
                await addFormParam('is_restricted', isRestricted, false, true)
            }
    
            if (isUltraRestricted !== undefined) {
                await addFormParam('is_ultra_restricted', isUltraRestricted, false, true)
            }
    
            if (realName !== undefined) {
                await addFormParam('real_name', realName, false, true)
            }
    
            if (resend !== undefined) {
                await addFormParam('resend', resend, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersInviteUserToWorkspaceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.invite',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersInviteUserToWorkspaceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List users on a workspace
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:read&#x60;
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} [cursor] Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
         * @param {number} [limit] Limit for how many users to be retrieved per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaceUsers: async (token: string, teamId: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('listWorkspaceUsers', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('listWorkspaceUsers', 'teamId', teamId)
            const localVarPath = `/admin.users.list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:read"], configuration)
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a user from a workspace.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} userId The ID of the user to remove.
         * @param {AdminusersRemoveUserFromWorkspaceRequest} adminusersRemoveUserFromWorkspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromWorkspace: async (token: string, teamId: string, userId: string, adminusersRemoveUserFromWorkspaceRequest: AdminusersRemoveUserFromWorkspaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'userId', userId)
            // verify required parameter 'adminusersRemoveUserFromWorkspaceRequest' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'adminusersRemoveUserFromWorkspaceRequest', adminusersRemoveUserFromWorkspaceRequest)
            const localVarPath = `/admin.users.remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersRemoveUserFromWorkspaceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersRemoveUserFromWorkspaceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an existing guest, regular user, or owner to be an admin user.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} userId The ID of the user to designate as an admin.
         * @param {AdminusersSetAdminUserRequest} adminusersSetAdminUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAdminUser: async (token: string, teamId: string, userId: string, adminusersSetAdminUserRequest: AdminusersSetAdminUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setAdminUser', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setAdminUser', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setAdminUser', 'userId', userId)
            // verify required parameter 'adminusersSetAdminUserRequest' is not null or undefined
            assertParamExists('setAdminUser', 'adminusersSetAdminUserRequest', adminusersSetAdminUserRequest)
            const localVarPath = `/admin.users.setAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersSetAdminUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.setAdmin',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersSetAdminUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an expiration for a guest user
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {number} expirationTs Timestamp when guest account should be disabled.
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} userId The ID of the user to set an expiration for.
         * @param {AdminusersSetExpirationGuestRequest} adminusersSetExpirationGuestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExpirationGuest: async (token: string, expirationTs: number, teamId: string, userId: string, adminusersSetExpirationGuestRequest: AdminusersSetExpirationGuestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setExpirationGuest', 'token', token)
            // verify required parameter 'expirationTs' is not null or undefined
            assertParamExists('setExpirationGuest', 'expirationTs', expirationTs)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setExpirationGuest', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setExpirationGuest', 'userId', userId)
            // verify required parameter 'adminusersSetExpirationGuestRequest' is not null or undefined
            assertParamExists('setExpirationGuest', 'adminusersSetExpirationGuestRequest', adminusersSetExpirationGuestRequest)
            const localVarPath = `/admin.users.setExpiration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (expirationTs !== undefined) {
                await addFormParam('expiration_ts', expirationTs, false, true)
            }
    
            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersSetExpirationGuestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.setExpiration',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersSetExpirationGuestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an existing guest user, admin user, or owner to be a regular user.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} userId The ID of the user to designate as a regular user.
         * @param {AdminusersSetRegularUserRequest} adminusersSetRegularUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRegularUser: async (token: string, teamId: string, userId: string, adminusersSetRegularUserRequest: AdminusersSetRegularUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setRegularUser', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setRegularUser', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setRegularUser', 'userId', userId)
            // verify required parameter 'adminusersSetRegularUserRequest' is not null or undefined
            assertParamExists('setRegularUser', 'adminusersSetRegularUserRequest', adminusersSetRegularUserRequest)
            const localVarPath = `/admin.users.setRegular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersSetRegularUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.setRegular',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersSetRegularUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an existing guest, regular user, or admin user to be a workspace owner.
         * @param {string} token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
         * @param {string} teamId The ID (&#x60;T1234&#x60;) of the workspace.
         * @param {string} userId Id of the user to promote to owner.
         * @param {AdminusersSetWorkspaceOwnerRequest} adminusersSetWorkspaceOwnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceOwner: async (token: string, teamId: string, userId: string, adminusersSetWorkspaceOwnerRequest: AdminusersSetWorkspaceOwnerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('setWorkspaceOwner', 'token', token)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('setWorkspaceOwner', 'teamId', teamId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setWorkspaceOwner', 'userId', userId)
            // verify required parameter 'adminusersSetWorkspaceOwnerRequest' is not null or undefined
            assertParamExists('setWorkspaceOwner', 'adminusersSetWorkspaceOwnerRequest', adminusersSetWorkspaceOwnerRequest)
            const localVarPath = `/admin.users.setOwner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication slackAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "slackAuth", ["admin.users:write"], configuration)
            if (token != null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (teamId !== undefined) {
                await addFormParam('team_id', teamId, false, true)
            }
    
            if (userId !== undefined) {
                await addFormParam('user_id', userId, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adminusersSetWorkspaceOwnerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin.users.setOwner',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adminusersSetWorkspaceOwnerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUsersApi - functional programming interface
 * @export
 */
export const AdminUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an Enterprise user to a workspace.
         * @param {AdminUsersApiAddWorkspaceUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWorkspaceUser(requestParameters: AdminUsersApiAddWorkspaceUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersAddWorkspaceUserResponse>> {
            const adminusersAddWorkspaceUserRequest: AdminusersAddWorkspaceUserRequest = {
                channel_ids: requestParameters.channel_ids,
                is_restricted: requestParameters.is_restricted,
                is_ultra_restricted: requestParameters.is_ultra_restricted,
                team_id: requestParameters.team_id,
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWorkspaceUser(requestParameters.token, requestParameters.teamId, requestParameters.userId, adminusersAddWorkspaceUserRequest, requestParameters.channelIds, requestParameters.isRestricted, requestParameters.isUltraRestricted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invite a user to a workspace.
         * @param {AdminUsersApiInviteUserToWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUserToWorkspace(requestParameters: AdminUsersApiInviteUserToWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersInviteUserToWorkspaceResponse>> {
            const adminusersInviteUserToWorkspaceRequest: AdminusersInviteUserToWorkspaceRequest = {
                channel_ids: requestParameters.channel_ids,
                custom_message: requestParameters.custom_message,
                email: requestParameters.email,
                guest_expiration_ts: requestParameters.guest_expiration_ts,
                is_restricted: requestParameters.is_restricted,
                is_ultra_restricted: requestParameters.is_ultra_restricted,
                real_name: requestParameters.real_name,
                resend: requestParameters.resend,
                team_id: requestParameters.team_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUserToWorkspace(requestParameters.token, requestParameters.channelIds, requestParameters.email, requestParameters.teamId, adminusersInviteUserToWorkspaceRequest, requestParameters.customMessage, requestParameters.guestExpirationTs, requestParameters.isRestricted, requestParameters.isUltraRestricted, requestParameters.realName, requestParameters.resend, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List users on a workspace
         * @param {AdminUsersApiListWorkspaceUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkspaceUsers(requestParameters: AdminUsersApiListWorkspaceUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersListWorkspaceUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceUsers(requestParameters.token, requestParameters.teamId, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a user from a workspace.
         * @param {AdminUsersApiRemoveUserFromWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromWorkspace(requestParameters: AdminUsersApiRemoveUserFromWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersRemoveUserFromWorkspaceResponse>> {
            const adminusersRemoveUserFromWorkspaceRequest: AdminusersRemoveUserFromWorkspaceRequest = {
                team_id: requestParameters.team_id,
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromWorkspace(requestParameters.token, requestParameters.teamId, requestParameters.userId, adminusersRemoveUserFromWorkspaceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set an existing guest, regular user, or owner to be an admin user.
         * @param {AdminUsersApiSetAdminUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAdminUser(requestParameters: AdminUsersApiSetAdminUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersSetAdminUserResponse>> {
            const adminusersSetAdminUserRequest: AdminusersSetAdminUserRequest = {
                team_id: requestParameters.team_id,
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAdminUser(requestParameters.token, requestParameters.teamId, requestParameters.userId, adminusersSetAdminUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set an expiration for a guest user
         * @param {AdminUsersApiSetExpirationGuestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExpirationGuest(requestParameters: AdminUsersApiSetExpirationGuestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersSetExpirationGuestResponse>> {
            const adminusersSetExpirationGuestRequest: AdminusersSetExpirationGuestRequest = {
                expiration_ts: requestParameters.expiration_ts,
                team_id: requestParameters.team_id,
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setExpirationGuest(requestParameters.token, requestParameters.expirationTs, requestParameters.teamId, requestParameters.userId, adminusersSetExpirationGuestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set an existing guest user, admin user, or owner to be a regular user.
         * @param {AdminUsersApiSetRegularUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRegularUser(requestParameters: AdminUsersApiSetRegularUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersSetRegularUserResponse>> {
            const adminusersSetRegularUserRequest: AdminusersSetRegularUserRequest = {
                team_id: requestParameters.team_id,
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRegularUser(requestParameters.token, requestParameters.teamId, requestParameters.userId, adminusersSetRegularUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set an existing guest, regular user, or admin user to be a workspace owner.
         * @param {AdminUsersApiSetWorkspaceOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWorkspaceOwner(requestParameters: AdminUsersApiSetWorkspaceOwnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersSetWorkspaceOwnerResponse>> {
            const adminusersSetWorkspaceOwnerRequest: AdminusersSetWorkspaceOwnerRequest = {
                team_id: requestParameters.team_id,
                user_id: requestParameters.user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setWorkspaceOwner(requestParameters.token, requestParameters.teamId, requestParameters.userId, adminusersSetWorkspaceOwnerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUsersApi - factory interface
 * @export
 */
export const AdminUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUsersApiFp(configuration)
    return {
        /**
         * Add an Enterprise user to a workspace.
         * @param {AdminUsersApiAddWorkspaceUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkspaceUser(requestParameters: AdminUsersApiAddWorkspaceUserRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersAddWorkspaceUserResponse> {
            return localVarFp.addWorkspaceUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite a user to a workspace.
         * @param {AdminUsersApiInviteUserToWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToWorkspace(requestParameters: AdminUsersApiInviteUserToWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersInviteUserToWorkspaceResponse> {
            return localVarFp.inviteUserToWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List users on a workspace
         * @param {AdminUsersApiListWorkspaceUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaceUsers(requestParameters: AdminUsersApiListWorkspaceUsersRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersListWorkspaceUsersResponse> {
            return localVarFp.listWorkspaceUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user from a workspace.
         * @param {AdminUsersApiRemoveUserFromWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromWorkspace(requestParameters: AdminUsersApiRemoveUserFromWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersRemoveUserFromWorkspaceResponse> {
            return localVarFp.removeUserFromWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set an existing guest, regular user, or owner to be an admin user.
         * @param {AdminUsersApiSetAdminUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAdminUser(requestParameters: AdminUsersApiSetAdminUserRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersSetAdminUserResponse> {
            return localVarFp.setAdminUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set an expiration for a guest user
         * @param {AdminUsersApiSetExpirationGuestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExpirationGuest(requestParameters: AdminUsersApiSetExpirationGuestRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersSetExpirationGuestResponse> {
            return localVarFp.setExpirationGuest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set an existing guest user, admin user, or owner to be a regular user.
         * @param {AdminUsersApiSetRegularUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRegularUser(requestParameters: AdminUsersApiSetRegularUserRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersSetRegularUserResponse> {
            return localVarFp.setRegularUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set an existing guest, regular user, or admin user to be a workspace owner.
         * @param {AdminUsersApiSetWorkspaceOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceOwner(requestParameters: AdminUsersApiSetWorkspaceOwnerRequest, options?: AxiosRequestConfig): AxiosPromise<AdminusersSetWorkspaceOwnerResponse> {
            return localVarFp.setWorkspaceOwner(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addWorkspaceUser operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiAddWorkspaceUserRequest
 */
export type AdminUsersApiAddWorkspaceUserRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiAddWorkspaceUser
    */
    readonly token: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiAddWorkspaceUser
    */
    readonly teamId: string
    
    /**
    * The ID of the user to add to the workspace.
    * @type {string}
    * @memberof AdminUsersApiAddWorkspaceUser
    */
    readonly userId: string
    
    /**
    * Comma separated values of channel IDs to add user in the new workspace.
    * @type {string}
    * @memberof AdminUsersApiAddWorkspaceUser
    */
    readonly channelIds?: string
    
    /**
    * True if user should be added to the workspace as a guest.
    * @type {boolean}
    * @memberof AdminUsersApiAddWorkspaceUser
    */
    readonly isRestricted?: boolean
    
    /**
    * True if user should be added to the workspace as a single-channel guest.
    * @type {boolean}
    * @memberof AdminUsersApiAddWorkspaceUser
    */
    readonly isUltraRestricted?: boolean
    
} & AdminusersAddWorkspaceUserRequest

/**
 * Request parameters for inviteUserToWorkspace operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiInviteUserToWorkspaceRequest
 */
export type AdminUsersApiInviteUserToWorkspaceRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly token: string
    
    /**
    * A comma-separated list of `channel_id`s for this user to join. At least one channel is required.
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly channelIds: string
    
    /**
    * The email address of the person to invite.
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly email: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly teamId: string
    
    /**
    * An optional message to send to the user in the invite email.
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly customMessage?: string
    
    /**
    * Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly guestExpirationTs?: string
    
    /**
    * Is this user a multi-channel guest user? (default: false)
    * @type {boolean}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly isRestricted?: boolean
    
    /**
    * Is this user a single channel guest user? (default: false)
    * @type {boolean}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly isUltraRestricted?: boolean
    
    /**
    * Full name of the user.
    * @type {string}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly realName?: string
    
    /**
    * Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    * @type {boolean}
    * @memberof AdminUsersApiInviteUserToWorkspace
    */
    readonly resend?: boolean
    
} & AdminusersInviteUserToWorkspaceRequest

/**
 * Request parameters for listWorkspaceUsers operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiListWorkspaceUsersRequest
 */
export type AdminUsersApiListWorkspaceUsersRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:read`
    * @type {string}
    * @memberof AdminUsersApiListWorkspaceUsers
    */
    readonly token: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiListWorkspaceUsers
    */
    readonly teamId: string
    
    /**
    * Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    * @type {string}
    * @memberof AdminUsersApiListWorkspaceUsers
    */
    readonly cursor?: string
    
    /**
    * Limit for how many users to be retrieved per page
    * @type {number}
    * @memberof AdminUsersApiListWorkspaceUsers
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeUserFromWorkspace operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiRemoveUserFromWorkspaceRequest
 */
export type AdminUsersApiRemoveUserFromWorkspaceRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiRemoveUserFromWorkspace
    */
    readonly token: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiRemoveUserFromWorkspace
    */
    readonly teamId: string
    
    /**
    * The ID of the user to remove.
    * @type {string}
    * @memberof AdminUsersApiRemoveUserFromWorkspace
    */
    readonly userId: string
    
} & AdminusersRemoveUserFromWorkspaceRequest

/**
 * Request parameters for setAdminUser operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiSetAdminUserRequest
 */
export type AdminUsersApiSetAdminUserRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiSetAdminUser
    */
    readonly token: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiSetAdminUser
    */
    readonly teamId: string
    
    /**
    * The ID of the user to designate as an admin.
    * @type {string}
    * @memberof AdminUsersApiSetAdminUser
    */
    readonly userId: string
    
} & AdminusersSetAdminUserRequest

/**
 * Request parameters for setExpirationGuest operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiSetExpirationGuestRequest
 */
export type AdminUsersApiSetExpirationGuestRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiSetExpirationGuest
    */
    readonly token: string
    
    /**
    * Timestamp when guest account should be disabled.
    * @type {number}
    * @memberof AdminUsersApiSetExpirationGuest
    */
    readonly expirationTs: number
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiSetExpirationGuest
    */
    readonly teamId: string
    
    /**
    * The ID of the user to set an expiration for.
    * @type {string}
    * @memberof AdminUsersApiSetExpirationGuest
    */
    readonly userId: string
    
} & AdminusersSetExpirationGuestRequest

/**
 * Request parameters for setRegularUser operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiSetRegularUserRequest
 */
export type AdminUsersApiSetRegularUserRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiSetRegularUser
    */
    readonly token: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiSetRegularUser
    */
    readonly teamId: string
    
    /**
    * The ID of the user to designate as a regular user.
    * @type {string}
    * @memberof AdminUsersApiSetRegularUser
    */
    readonly userId: string
    
} & AdminusersSetRegularUserRequest

/**
 * Request parameters for setWorkspaceOwner operation in AdminUsersApi.
 * @export
 * @interface AdminUsersApiSetWorkspaceOwnerRequest
 */
export type AdminUsersApiSetWorkspaceOwnerRequest = {
    
    /**
    * Authentication token. Requires scope: `admin.users:write`
    * @type {string}
    * @memberof AdminUsersApiSetWorkspaceOwner
    */
    readonly token: string
    
    /**
    * The ID (`T1234`) of the workspace.
    * @type {string}
    * @memberof AdminUsersApiSetWorkspaceOwner
    */
    readonly teamId: string
    
    /**
    * Id of the user to promote to owner.
    * @type {string}
    * @memberof AdminUsersApiSetWorkspaceOwner
    */
    readonly userId: string
    
} & AdminusersSetWorkspaceOwnerRequest

/**
 * AdminUsersApiGenerated - object-oriented interface
 * @export
 * @class AdminUsersApiGenerated
 * @extends {BaseAPI}
 */
export class AdminUsersApiGenerated extends BaseAPI {
    /**
     * Add an Enterprise user to a workspace.
     * @param {AdminUsersApiAddWorkspaceUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public addWorkspaceUser(requestParameters: AdminUsersApiAddWorkspaceUserRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).addWorkspaceUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invite a user to a workspace.
     * @param {AdminUsersApiInviteUserToWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public inviteUserToWorkspace(requestParameters: AdminUsersApiInviteUserToWorkspaceRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).inviteUserToWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List users on a workspace
     * @param {AdminUsersApiListWorkspaceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public listWorkspaceUsers(requestParameters: AdminUsersApiListWorkspaceUsersRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).listWorkspaceUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a user from a workspace.
     * @param {AdminUsersApiRemoveUserFromWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public removeUserFromWorkspace(requestParameters: AdminUsersApiRemoveUserFromWorkspaceRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).removeUserFromWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param {AdminUsersApiSetAdminUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public setAdminUser(requestParameters: AdminUsersApiSetAdminUserRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).setAdminUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an expiration for a guest user
     * @param {AdminUsersApiSetExpirationGuestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public setExpirationGuest(requestParameters: AdminUsersApiSetExpirationGuestRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).setExpirationGuest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param {AdminUsersApiSetRegularUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public setRegularUser(requestParameters: AdminUsersApiSetRegularUserRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).setRegularUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param {AdminUsersApiSetWorkspaceOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApiGenerated
     */
    public setWorkspaceOwner(requestParameters: AdminUsersApiSetWorkspaceOwnerRequest, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).setWorkspaceOwner(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
