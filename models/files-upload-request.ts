/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"


/**
 * 
 * @export
 * @interface FilesUploadRequest
 */
export interface FilesUploadRequest {
    /**
     * Title of file.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'title'?: string;
    /**
     * Comma-separated list of channel names or IDs where the file will be shared.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'channels'?: string;
    /**
     * File contents via a POST variable. If omitting this parameter, you must provide a `file`.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'content'?: string;
    /**
     * File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'file'?: string;
    /**
     * Filename of file.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'filename'?: string;
    /**
     * A [file type](https://slack.dev) identifier.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'filetype'?: string;
    /**
     * The message text introducing the file in specified `channels`.
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'initial_comment'?: string;
    /**
     * Provide another message\'s `ts` value to upload this file as a reply. Never use a reply\'s `ts` value; use its parent instead.
     * @type {number}
     * @memberof FilesUploadRequest
     */
    'thread_ts'?: number;
    /**
     * Authentication token. Requires scope: `files:write:user`
     * @type {string}
     * @memberof FilesUploadRequest
     */
    'token'?: string;
}

